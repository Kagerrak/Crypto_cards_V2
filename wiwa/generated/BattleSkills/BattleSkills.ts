// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ContractURIUpdated extends ethereum.Event {
  get params(): ContractURIUpdated__Params {
    return new ContractURIUpdated__Params(this);
  }
}

export class ContractURIUpdated__Params {
  _event: ContractURIUpdated;

  constructor(event: ContractURIUpdated) {
    this._event = event;
  }

  get prevURI(): string {
    return this._event.parameters[0].value.toString();
  }

  get newURI(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class DefaultRoyalty extends ethereum.Event {
  get params(): DefaultRoyalty__Params {
    return new DefaultRoyalty__Params(this);
  }
}

export class DefaultRoyalty__Params {
  _event: DefaultRoyalty;

  constructor(event: DefaultRoyalty) {
    this._event = event;
  }

  get newRoyaltyRecipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newRoyaltyBps(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewSkill extends ethereum.Event {
  get params(): NewSkill__Params {
    return new NewSkill__Params(this);
  }
}

export class NewSkill__Params {
  _event: NewSkill;

  constructor(event: NewSkill) {
    this._event = event;
  }

  get skillId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get damage(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get manaCost(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get statusEffectId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class NewStatusEffect extends ethereum.Event {
  get params(): NewStatusEffect__Params {
    return new NewStatusEffect__Params(this);
  }
}

export class NewStatusEffect__Params {
  _event: NewStatusEffect;

  constructor(event: NewStatusEffect) {
    this._event = event;
  }

  get effectId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get isPositive(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get duration(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get attackBoost(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get attackReduction(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get defenseBoost(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get defenseReduction(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get healPerTurn(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get damagePerTurn(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }

  get isStun(): boolean {
    return this._event.parameters[10].value.toBoolean();
  }
}

export class OperatorRestriction extends ethereum.Event {
  get params(): OperatorRestriction__Params {
    return new OperatorRestriction__Params(this);
  }
}

export class OperatorRestriction__Params {
  _event: OperatorRestriction;

  constructor(event: OperatorRestriction) {
    this._event = event;
  }

  get restriction(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class OwnerUpdated extends ethereum.Event {
  get params(): OwnerUpdated__Params {
    return new OwnerUpdated__Params(this);
  }
}

export class OwnerUpdated__Params {
  _event: OwnerUpdated;

  constructor(event: OwnerUpdated) {
    this._event = event;
  }

  get prevOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RoyaltyForToken extends ethereum.Event {
  get params(): RoyaltyForToken__Params {
    return new RoyaltyForToken__Params(this);
  }
}

export class RoyaltyForToken__Params {
  _event: RoyaltyForToken;

  constructor(event: RoyaltyForToken) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get royaltyRecipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get royaltyBps(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get _operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get _values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get _operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get _value(): string {
    return this._event.parameters[0].value.toString();
  }

  get _id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class BattleSkills__getDefaultRoyaltyInfoResult {
  value0: Address;
  value1: i32;

  constructor(value0: Address, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    return map;
  }

  getValue0(): Address {
    return this.value0;
  }

  getValue1(): i32 {
    return this.value1;
  }
}

export class BattleSkills__getRoyaltyInfoForTokenResult {
  value0: Address;
  value1: i32;

  constructor(value0: Address, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    return map;
  }

  getValue0(): Address {
    return this.value0;
  }

  getValue1(): i32 {
    return this.value1;
  }
}

export class BattleSkills__getSkillResultValue0Struct extends ethereum.Tuple {
  get skillId(): BigInt {
    return this[0].toBigInt();
  }

  get name(): string {
    return this[1].toString();
  }

  get damage(): BigInt {
    return this[2].toBigInt();
  }

  get manaCost(): BigInt {
    return this[3].toBigInt();
  }

  get statusEffectId(): BigInt {
    return this[4].toBigInt();
  }
}

export class BattleSkills__getStatusEffectResultValue0Struct extends ethereum.Tuple {
  get effectId(): BigInt {
    return this[0].toBigInt();
  }

  get name(): string {
    return this[1].toString();
  }

  get isPositive(): boolean {
    return this[2].toBoolean();
  }

  get duration(): BigInt {
    return this[3].toBigInt();
  }

  get attackBoost(): BigInt {
    return this[4].toBigInt();
  }

  get attackReduction(): BigInt {
    return this[5].toBigInt();
  }

  get defenseBoost(): BigInt {
    return this[6].toBigInt();
  }

  get defenseReduction(): BigInt {
    return this[7].toBigInt();
  }

  get healPerTurn(): BigInt {
    return this[8].toBigInt();
  }

  get damagePerTurn(): BigInt {
    return this[9].toBigInt();
  }

  get isStun(): boolean {
    return this[10].toBoolean();
  }
}

export class BattleSkills__royaltyInfoResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getReceiver(): Address {
    return this.value0;
  }

  getRoyaltyAmount(): BigInt {
    return this.value1;
  }
}

export class BattleSkills__skillsResult {
  value0: BigInt;
  value1: string;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: string,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getSkillId(): BigInt {
    return this.value0;
  }

  getName(): string {
    return this.value1;
  }

  getDamage(): BigInt {
    return this.value2;
  }

  getManaCost(): BigInt {
    return this.value3;
  }

  getStatusEffectId(): BigInt {
    return this.value4;
  }
}

export class BattleSkills__statusEffectsResult {
  value0: BigInt;
  value1: string;
  value2: boolean;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;
  value10: boolean;

  constructor(
    value0: BigInt,
    value1: string,
    value2: boolean,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt,
    value10: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromBoolean(this.value10));
    return map;
  }

  getEffectId(): BigInt {
    return this.value0;
  }

  getName(): string {
    return this.value1;
  }

  getIsPositive(): boolean {
    return this.value2;
  }

  getDuration(): BigInt {
    return this.value3;
  }

  getAttackBoost(): BigInt {
    return this.value4;
  }

  getAttackReduction(): BigInt {
    return this.value5;
  }

  getDefenseBoost(): BigInt {
    return this.value6;
  }

  getDefenseReduction(): BigInt {
    return this.value7;
  }

  getHealPerTurn(): BigInt {
    return this.value8;
  }

  getDamagePerTurn(): BigInt {
    return this.value9;
  }

  getIsStun(): boolean {
    return this.value10;
  }
}

export class BattleSkills extends ethereum.SmartContract {
  static bind(address: Address): BattleSkills {
    return new BattleSkills("BattleSkills", address);
  }

  OPERATOR_FILTER_REGISTRY(): Address {
    let result = super.call(
      "OPERATOR_FILTER_REGISTRY",
      "OPERATOR_FILTER_REGISTRY():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_OPERATOR_FILTER_REGISTRY(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "OPERATOR_FILTER_REGISTRY",
      "OPERATOR_FILTER_REGISTRY():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(param0: Address, param1: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  contractURI(): string {
    let result = super.call("contractURI", "contractURI():(string)", []);

    return result[0].toString();
  }

  try_contractURI(): ethereum.CallResult<string> {
    let result = super.tryCall("contractURI", "contractURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getBaseURICount(): BigInt {
    let result = super.call(
      "getBaseURICount",
      "getBaseURICount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getBaseURICount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBaseURICount",
      "getBaseURICount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBatchIdAtIndex(_index: BigInt): BigInt {
    let result = super.call(
      "getBatchIdAtIndex",
      "getBatchIdAtIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );

    return result[0].toBigInt();
  }

  try_getBatchIdAtIndex(_index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBatchIdAtIndex",
      "getBatchIdAtIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDefaultRoyaltyInfo(): BattleSkills__getDefaultRoyaltyInfoResult {
    let result = super.call(
      "getDefaultRoyaltyInfo",
      "getDefaultRoyaltyInfo():(address,uint16)",
      []
    );

    return new BattleSkills__getDefaultRoyaltyInfoResult(
      result[0].toAddress(),
      result[1].toI32()
    );
  }

  try_getDefaultRoyaltyInfo(): ethereum.CallResult<
    BattleSkills__getDefaultRoyaltyInfoResult
  > {
    let result = super.tryCall(
      "getDefaultRoyaltyInfo",
      "getDefaultRoyaltyInfo():(address,uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BattleSkills__getDefaultRoyaltyInfoResult(
        value[0].toAddress(),
        value[1].toI32()
      )
    );
  }

  getRandomSkill(_enemyLevel: BigInt): BigInt {
    let result = super.call(
      "getRandomSkill",
      "getRandomSkill(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_enemyLevel)]
    );

    return result[0].toBigInt();
  }

  try_getRandomSkill(_enemyLevel: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRandomSkill",
      "getRandomSkill(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_enemyLevel)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoyaltyInfoForToken(
    _tokenId: BigInt
  ): BattleSkills__getRoyaltyInfoForTokenResult {
    let result = super.call(
      "getRoyaltyInfoForToken",
      "getRoyaltyInfoForToken(uint256):(address,uint16)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );

    return new BattleSkills__getRoyaltyInfoForTokenResult(
      result[0].toAddress(),
      result[1].toI32()
    );
  }

  try_getRoyaltyInfoForToken(
    _tokenId: BigInt
  ): ethereum.CallResult<BattleSkills__getRoyaltyInfoForTokenResult> {
    let result = super.tryCall(
      "getRoyaltyInfoForToken",
      "getRoyaltyInfoForToken(uint256):(address,uint16)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BattleSkills__getRoyaltyInfoForTokenResult(
        value[0].toAddress(),
        value[1].toI32()
      )
    );
  }

  getSkill(_skillId: BigInt): BattleSkills__getSkillResultValue0Struct {
    let result = super.call(
      "getSkill",
      "getSkill(uint256):((uint256,string,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_skillId)]
    );

    return changetype<BattleSkills__getSkillResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getSkill(
    _skillId: BigInt
  ): ethereum.CallResult<BattleSkills__getSkillResultValue0Struct> {
    let result = super.tryCall(
      "getSkill",
      "getSkill(uint256):((uint256,string,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_skillId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<BattleSkills__getSkillResultValue0Struct>(value[0].toTuple())
    );
  }

  getStatusEffect(
    _effectId: BigInt
  ): BattleSkills__getStatusEffectResultValue0Struct {
    let result = super.call(
      "getStatusEffect",
      "getStatusEffect(uint256):((uint256,string,bool,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool))",
      [ethereum.Value.fromUnsignedBigInt(_effectId)]
    );

    return changetype<BattleSkills__getStatusEffectResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getStatusEffect(
    _effectId: BigInt
  ): ethereum.CallResult<BattleSkills__getStatusEffectResultValue0Struct> {
    let result = super.tryCall(
      "getStatusEffect",
      "getStatusEffect(uint256):((uint256,string,bool,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool))",
      [ethereum.Value.fromUnsignedBigInt(_effectId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<BattleSkills__getStatusEffectResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  isApprovedForAll(param0: Address, param1: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  multicall(data: Array<Bytes>): Array<Bytes> {
    let result = super.call("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);

    return result[0].toBytesArray();
  }

  try_multicall(data: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nextTokenIdToMint(): BigInt {
    let result = super.call(
      "nextTokenIdToMint",
      "nextTokenIdToMint():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_nextTokenIdToMint(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextTokenIdToMint",
      "nextTokenIdToMint():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numSkills(): BigInt {
    let result = super.call("numSkills", "numSkills():(uint256)", []);

    return result[0].toBigInt();
  }

  try_numSkills(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("numSkills", "numSkills():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numStatusEffects(): BigInt {
    let result = super.call(
      "numStatusEffects",
      "numStatusEffects():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_numStatusEffects(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numStatusEffects",
      "numStatusEffects():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  operatorRestriction(): boolean {
    let result = super.call(
      "operatorRestriction",
      "operatorRestriction():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_operatorRestriction(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "operatorRestriction",
      "operatorRestriction():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  royaltyInfo(
    tokenId: BigInt,
    salePrice: BigInt
  ): BattleSkills__royaltyInfoResult {
    let result = super.call(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(salePrice)
      ]
    );

    return new BattleSkills__royaltyInfoResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_royaltyInfo(
    tokenId: BigInt,
    salePrice: BigInt
  ): ethereum.CallResult<BattleSkills__royaltyInfoResult> {
    let result = super.tryCall(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(salePrice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BattleSkills__royaltyInfoResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  skills(param0: BigInt): BattleSkills__skillsResult {
    let result = super.call(
      "skills",
      "skills(uint256):(uint256,string,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new BattleSkills__skillsResult(
      result[0].toBigInt(),
      result[1].toString(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_skills(param0: BigInt): ethereum.CallResult<BattleSkills__skillsResult> {
    let result = super.tryCall(
      "skills",
      "skills(uint256):(uint256,string,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BattleSkills__skillsResult(
        value[0].toBigInt(),
        value[1].toString(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  statusEffects(param0: BigInt): BattleSkills__statusEffectsResult {
    let result = super.call(
      "statusEffects",
      "statusEffects(uint256):(uint256,string,bool,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new BattleSkills__statusEffectsResult(
      result[0].toBigInt(),
      result[1].toString(),
      result[2].toBoolean(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toBoolean()
    );
  }

  try_statusEffects(
    param0: BigInt
  ): ethereum.CallResult<BattleSkills__statusEffectsResult> {
    let result = super.tryCall(
      "statusEffects",
      "statusEffects(uint256):(uint256,string,bool,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BattleSkills__statusEffectsResult(
        value[0].toBigInt(),
        value[1].toString(),
        value[2].toBoolean(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toBoolean()
      )
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(param0: BigInt): BigInt {
    let result = super.call("totalSupply", "totalSupply(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_totalSupply(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSupply",
      "totalSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uri(_tokenId: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toString();
  }

  try_uri(_tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BatchMintToCall extends ethereum.Call {
  get inputs(): BatchMintToCall__Inputs {
    return new BatchMintToCall__Inputs(this);
  }

  get outputs(): BatchMintToCall__Outputs {
    return new BatchMintToCall__Outputs(this);
  }
}

export class BatchMintToCall__Inputs {
  _call: BatchMintToCall;

  constructor(call: BatchMintToCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _baseURI(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class BatchMintToCall__Outputs {
  _call: BatchMintToCall;

  constructor(call: BatchMintToCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class BurnBatchCall extends ethereum.Call {
  get inputs(): BurnBatchCall__Inputs {
    return new BurnBatchCall__Inputs(this);
  }

  get outputs(): BurnBatchCall__Outputs {
    return new BurnBatchCall__Outputs(this);
  }
}

export class BurnBatchCall__Inputs {
  _call: BurnBatchCall;

  constructor(call: BurnBatchCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class BurnBatchCall__Outputs {
  _call: BurnBatchCall;

  constructor(call: BurnBatchCall) {
    this._call = call;
  }
}

export class CreateSkillCall extends ethereum.Call {
  get inputs(): CreateSkillCall__Inputs {
    return new CreateSkillCall__Inputs(this);
  }

  get outputs(): CreateSkillCall__Outputs {
    return new CreateSkillCall__Outputs(this);
  }
}

export class CreateSkillCall__Inputs {
  _call: CreateSkillCall;

  constructor(call: CreateSkillCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _damage(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _manaCost(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _statusEffectId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _tokenURI(): string {
    return this._call.inputValues[4].value.toString();
  }
}

export class CreateSkillCall__Outputs {
  _call: CreateSkillCall;

  constructor(call: CreateSkillCall) {
    this._call = call;
  }
}

export class CreateStatusEffectCall extends ethereum.Call {
  get inputs(): CreateStatusEffectCall__Inputs {
    return new CreateStatusEffectCall__Inputs(this);
  }

  get outputs(): CreateStatusEffectCall__Outputs {
    return new CreateStatusEffectCall__Outputs(this);
  }
}

export class CreateStatusEffectCall__Inputs {
  _call: CreateStatusEffectCall;

  constructor(call: CreateStatusEffectCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _duration(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _isPositive(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get _attackBoost(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _attackReduction(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _defenseBoost(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _defenseReduction(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _healPerTurn(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _damagePerTurn(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get _isStun(): boolean {
    return this._call.inputValues[9].value.toBoolean();
  }
}

export class CreateStatusEffectCall__Outputs {
  _call: CreateStatusEffectCall;

  constructor(call: CreateStatusEffectCall) {
    this._call = call;
  }
}

export class InitializeStatusEffectsCall extends ethereum.Call {
  get inputs(): InitializeStatusEffectsCall__Inputs {
    return new InitializeStatusEffectsCall__Inputs(this);
  }

  get outputs(): InitializeStatusEffectsCall__Outputs {
    return new InitializeStatusEffectsCall__Outputs(this);
  }
}

export class InitializeStatusEffectsCall__Inputs {
  _call: InitializeStatusEffectsCall;

  constructor(call: InitializeStatusEffectsCall) {
    this._call = call;
  }
}

export class InitializeStatusEffectsCall__Outputs {
  _call: InitializeStatusEffectsCall;

  constructor(call: InitializeStatusEffectsCall) {
    this._call = call;
  }
}

export class MintSkillCall extends ethereum.Call {
  get inputs(): MintSkillCall__Inputs {
    return new MintSkillCall__Inputs(this);
  }

  get outputs(): MintSkillCall__Outputs {
    return new MintSkillCall__Outputs(this);
  }
}

export class MintSkillCall__Inputs {
  _call: MintSkillCall;

  constructor(call: MintSkillCall) {
    this._call = call;
  }

  get _skillId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _caller(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class MintSkillCall__Outputs {
  _call: MintSkillCall;

  constructor(call: MintSkillCall) {
    this._call = call;
  }
}

export class MintToCall extends ethereum.Call {
  get inputs(): MintToCall__Inputs {
    return new MintToCall__Inputs(this);
  }

  get outputs(): MintToCall__Outputs {
    return new MintToCall__Outputs(this);
  }
}

export class MintToCall__Inputs {
  _call: MintToCall;

  constructor(call: MintToCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _tokenURI(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class MintToCall__Outputs {
  _call: MintToCall;

  constructor(call: MintToCall) {
    this._call = call;
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetContractURICall extends ethereum.Call {
  get inputs(): SetContractURICall__Inputs {
    return new SetContractURICall__Inputs(this);
  }

  get outputs(): SetContractURICall__Outputs {
    return new SetContractURICall__Outputs(this);
  }
}

export class SetContractURICall__Inputs {
  _call: SetContractURICall;

  constructor(call: SetContractURICall) {
    this._call = call;
  }

  get _uri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetContractURICall__Outputs {
  _call: SetContractURICall;

  constructor(call: SetContractURICall) {
    this._call = call;
  }
}

export class SetDefaultRoyaltyInfoCall extends ethereum.Call {
  get inputs(): SetDefaultRoyaltyInfoCall__Inputs {
    return new SetDefaultRoyaltyInfoCall__Inputs(this);
  }

  get outputs(): SetDefaultRoyaltyInfoCall__Outputs {
    return new SetDefaultRoyaltyInfoCall__Outputs(this);
  }
}

export class SetDefaultRoyaltyInfoCall__Inputs {
  _call: SetDefaultRoyaltyInfoCall;

  constructor(call: SetDefaultRoyaltyInfoCall) {
    this._call = call;
  }

  get _royaltyRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _royaltyBps(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetDefaultRoyaltyInfoCall__Outputs {
  _call: SetDefaultRoyaltyInfoCall;

  constructor(call: SetDefaultRoyaltyInfoCall) {
    this._call = call;
  }
}

export class SetOperatorRestrictionCall extends ethereum.Call {
  get inputs(): SetOperatorRestrictionCall__Inputs {
    return new SetOperatorRestrictionCall__Inputs(this);
  }

  get outputs(): SetOperatorRestrictionCall__Outputs {
    return new SetOperatorRestrictionCall__Outputs(this);
  }
}

export class SetOperatorRestrictionCall__Inputs {
  _call: SetOperatorRestrictionCall;

  constructor(call: SetOperatorRestrictionCall) {
    this._call = call;
  }

  get _restriction(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetOperatorRestrictionCall__Outputs {
  _call: SetOperatorRestrictionCall;

  constructor(call: SetOperatorRestrictionCall) {
    this._call = call;
  }
}

export class SetOwnerCall extends ethereum.Call {
  get inputs(): SetOwnerCall__Inputs {
    return new SetOwnerCall__Inputs(this);
  }

  get outputs(): SetOwnerCall__Outputs {
    return new SetOwnerCall__Outputs(this);
  }
}

export class SetOwnerCall__Inputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOwnerCall__Outputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }
}

export class SetRoyaltyInfoForTokenCall extends ethereum.Call {
  get inputs(): SetRoyaltyInfoForTokenCall__Inputs {
    return new SetRoyaltyInfoForTokenCall__Inputs(this);
  }

  get outputs(): SetRoyaltyInfoForTokenCall__Outputs {
    return new SetRoyaltyInfoForTokenCall__Outputs(this);
  }
}

export class SetRoyaltyInfoForTokenCall__Inputs {
  _call: SetRoyaltyInfoForTokenCall;

  constructor(call: SetRoyaltyInfoForTokenCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _bps(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetRoyaltyInfoForTokenCall__Outputs {
  _call: SetRoyaltyInfoForTokenCall;

  constructor(call: SetRoyaltyInfoForTokenCall) {
    this._call = call;
  }
}

export class UpdateSkillCall extends ethereum.Call {
  get inputs(): UpdateSkillCall__Inputs {
    return new UpdateSkillCall__Inputs(this);
  }

  get outputs(): UpdateSkillCall__Outputs {
    return new UpdateSkillCall__Outputs(this);
  }
}

export class UpdateSkillCall__Inputs {
  _call: UpdateSkillCall;

  constructor(call: UpdateSkillCall) {
    this._call = call;
  }

  get _skillId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _damage(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _manaCost(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _statusEffectId(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class UpdateSkillCall__Outputs {
  _call: UpdateSkillCall;

  constructor(call: UpdateSkillCall) {
    this._call = call;
  }
}
