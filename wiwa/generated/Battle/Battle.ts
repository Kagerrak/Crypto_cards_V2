// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BattleCancelled extends ethereum.Event {
  get params(): BattleCancelled__Params {
    return new BattleCancelled__Params(this);
  }
}

export class BattleCancelled__Params {
  _event: BattleCancelled;

  constructor(event: BattleCancelled) {
    this._event = event;
  }

  get battleId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get player(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BattleCreated extends ethereum.Event {
  get params(): BattleCreated__Params {
    return new BattleCreated__Params(this);
  }
}

export class BattleCreated__Params {
  _event: BattleCreated;

  constructor(event: BattleCreated) {
    this._event = event;
  }

  get battleId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get characterId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BattleEnded extends ethereum.Event {
  get params(): BattleEnded__Params {
    return new BattleEnded__Params(this);
  }
}

export class BattleEnded__Params {
  _event: BattleEnded;

  constructor(event: BattleEnded) {
    this._event = event;
  }

  get battleName(): string {
    return this._event.parameters[0].value.toString();
  }

  get battleId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get winner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get loser(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class BattleQuit extends ethereum.Event {
  get params(): BattleQuit__Params {
    return new BattleQuit__Params(this);
  }
}

export class BattleQuit__Params {
  _event: BattleQuit;

  constructor(event: BattleQuit) {
    this._event = event;
  }

  get battleId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get round(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get quitter(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class CharacterProxyData extends ethereum.Event {
  get params(): CharacterProxyData__Params {
    return new CharacterProxyData__Params(this);
  }
}

export class CharacterProxyData__Params {
  _event: CharacterProxyData;

  constructor(event: CharacterProxyData) {
    this._event = event;
  }

  get battleId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get player(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get health(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get attack(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get defense(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get mana(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get typeId(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get equippedSkills(): Array<BigInt> {
    return this._event.parameters[9].value.toBigIntArray();
  }
}

export class DiceRolled extends ethereum.Event {
  get params(): DiceRolled__Params {
    return new DiceRolled__Params(this);
  }
}

export class DiceRolled__Params {
  _event: DiceRolled;

  constructor(event: DiceRolled) {
    this._event = event;
  }

  get battleId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get player(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get round(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get diceNumber(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class HealthUpdated extends ethereum.Event {
  get params(): HealthUpdated__Params {
    return new HealthUpdated__Params(this);
  }
}

export class HealthUpdated__Params {
  _event: HealthUpdated;

  constructor(event: HealthUpdated) {
    this._event = event;
  }

  get battleId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get player1(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get health1(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get player2(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get health2(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class MoveSubmitted extends ethereum.Event {
  get params(): MoveSubmitted__Params {
    return new MoveSubmitted__Params(this);
  }
}

export class MoveSubmitted__Params {
  _event: MoveSubmitted;

  constructor(event: MoveSubmitted) {
    this._event = event;
  }

  get battleId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get player(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get move(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get round(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NewBattle extends ethereum.Event {
  get params(): NewBattle__Params {
    return new NewBattle__Params(this);
  }
}

export class NewBattle__Params {
  _event: NewBattle;

  constructor(event: NewBattle) {
    this._event = event;
  }

  get battleName(): string {
    return this._event.parameters[0].value.toString();
  }

  get battleId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get player1(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get player2(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get characterId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class OwnerUpdated extends ethereum.Event {
  get params(): OwnerUpdated__Params {
    return new OwnerUpdated__Params(this);
  }
}

export class OwnerUpdated__Params {
  _event: OwnerUpdated;

  constructor(event: OwnerUpdated) {
    this._event = event;
  }

  get prevOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RoundEnded extends ethereum.Event {
  get params(): RoundEnded__Params {
    return new RoundEnded__Params(this);
  }
}

export class RoundEnded__Params {
  _event: RoundEnded;

  constructor(event: RoundEnded) {
    this._event = event;
  }

  get battleId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get damagedPlayers(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }

  get damageDealt(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get damageTaken(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get round(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class SkillExecuted extends ethereum.Event {
  get params(): SkillExecuted__Params {
    return new SkillExecuted__Params(this);
  }
}

export class SkillExecuted__Params {
  _event: SkillExecuted;

  constructor(event: SkillExecuted) {
    this._event = event;
  }

  get battleId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get round(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get player(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get skillId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get skillName(): string {
    return this._event.parameters[4].value.toString();
  }

  get totalDamage(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class StatusEffectApplied extends ethereum.Event {
  get params(): StatusEffectApplied__Params {
    return new StatusEffectApplied__Params(this);
  }
}

export class StatusEffectApplied__Params {
  _event: StatusEffectApplied;

  constructor(event: StatusEffectApplied) {
    this._event = event;
  }

  get battleId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get round(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get character(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get statusEffectName(): string {
    return this._event.parameters[3].value.toString();
  }

  get duration(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class StatusEffectResolved extends ethereum.Event {
  get params(): StatusEffectResolved__Params {
    return new StatusEffectResolved__Params(this);
  }
}

export class StatusEffectResolved__Params {
  _event: StatusEffectResolved;

  constructor(event: StatusEffectResolved) {
    this._event = event;
  }

  get battleId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get player(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get effectId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get effectName(): string {
    return this._event.parameters[3].value.toString();
  }

  get effectType(): string {
    return this._event.parameters[4].value.toString();
  }

  get effectValue(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get round(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get duration(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class Battle__battlesResultBattleStatsStruct extends ethereum.Tuple {
  get initialHealth(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get initialMana(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get totalDamageDealt(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get totalDamageTaken(): Array<BigInt> {
    return this[3].toBigIntArray();
  }
}

export class Battle__battlesResult {
  value0: BigInt;
  value1: string;
  value2: i32;
  value3: Address;
  value4: BigInt;
  value5: Battle__battlesResultBattleStatsStruct;

  constructor(
    value0: BigInt,
    value1: string,
    value2: i32,
    value3: Address,
    value4: BigInt,
    value5: Battle__battlesResultBattleStatsStruct
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromTuple(this.value5));
    return map;
  }

  getBattleId(): BigInt {
    return this.value0;
  }

  getName(): string {
    return this.value1;
  }

  getBattleStatus(): i32 {
    return this.value2;
  }

  getWinner(): Address {
    return this.value3;
  }

  getRound(): BigInt {
    return this.value4;
  }

  getBattleStats(): Battle__battlesResultBattleStatsStruct {
    return this.value5;
  }
}

export class Battle__getBattleResultValue0Struct extends ethereum.Tuple {
  get battleId(): BigInt {
    return this[0].toBigInt();
  }

  get name(): string {
    return this[1].toString();
  }

  get players(): Array<Address> {
    return this[2].toAddressArray();
  }

  get characterIds(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get moves(): Array<BigInt> {
    return this[4].toBigIntArray();
  }

  get skillIndices(): Array<BigInt> {
    return this[5].toBigIntArray();
  }

  get battleStatus(): i32 {
    return this[6].toI32();
  }

  get winner(): Address {
    return this[7].toAddress();
  }

  get moveSubmitted(): Array<boolean> {
    return this[8].toBooleanArray();
  }

  get round(): BigInt {
    return this[9].toBigInt();
  }

  get battleStats(): Battle__getBattleResultValue0BattleStatsStruct {
    return changetype<Battle__getBattleResultValue0BattleStatsStruct>(
      this[10].toTuple()
    );
  }
}

export class Battle__getBattleResultValue0BattleStatsStruct extends ethereum.Tuple {
  get initialHealth(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get initialMana(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get totalDamageDealt(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get totalDamageTaken(): Array<BigInt> {
    return this[3].toBigIntArray();
  }
}

export class Battle__getBattleSummaryResult {
  value0: BigInt;
  value1: Array<BigInt>;
  value2: Array<BigInt>;
  value3: Array<BigInt>;
  value4: Address;
  value5: Address;

  constructor(
    value0: BigInt,
    value1: Array<BigInt>,
    value2: Array<BigInt>,
    value3: Array<BigInt>,
    value4: Address,
    value5: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigIntArray(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    return map;
  }

  getRound(): BigInt {
    return this.value0;
  }

  getDamageTaken(): Array<BigInt> {
    return this.value1;
  }

  getDamageDealt(): Array<BigInt> {
    return this.value2;
  }

  getManaConsumed(): Array<BigInt> {
    return this.value3;
  }

  getWinner(): Address {
    return this.value4;
  }

  getLoser(): Address {
    return this.value5;
  }
}

export class Battle__getCharacterProxyResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get health(): BigInt {
    return this[2].toBigInt();
  }

  get attack(): BigInt {
    return this[3].toBigInt();
  }

  get defense(): BigInt {
    return this[4].toBigInt();
  }

  get mana(): BigInt {
    return this[5].toBigInt();
  }

  get typeId(): BigInt {
    return this[6].toBigInt();
  }

  get equippedSkills(): Array<BigInt> {
    return this[7].toBigIntArray();
  }
}

export class Battle__getCharacterProxyActiveEffectsResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;

  constructor(value0: Array<BigInt>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }

  getEffectIds(): Array<BigInt> {
    return this.value0;
  }

  getDurations(): Array<BigInt> {
    return this.value1;
  }
}

export class Battle extends ethereum.SmartContract {
  static bind(address: Address): Battle {
    return new Battle("Battle", address);
  }

  activeBattlesId(param0: BigInt): BigInt {
    let result = super.call(
      "activeBattlesId",
      "activeBattlesId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_activeBattlesId(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "activeBattlesId",
      "activeBattlesId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  battleCounter(): BigInt {
    let result = super.call("battleCounter", "battleCounter():(uint256)", []);

    return result[0].toBigInt();
  }

  try_battleCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "battleCounter",
      "battleCounter():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  battleFee(): BigInt {
    let result = super.call("battleFee", "battleFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_battleFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("battleFee", "battleFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  battles(param0: BigInt): Battle__battlesResult {
    let result = super.call(
      "battles",
      "battles(uint256):(uint256,string,uint8,address,uint256,(uint256[2],uint256[2],uint256[2],uint256[2]))",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Battle__battlesResult(
      result[0].toBigInt(),
      result[1].toString(),
      result[2].toI32(),
      result[3].toAddress(),
      result[4].toBigInt(),
      changetype<Battle__battlesResultBattleStatsStruct>(result[5].toTuple())
    );
  }

  try_battles(param0: BigInt): ethereum.CallResult<Battle__battlesResult> {
    let result = super.tryCall(
      "battles",
      "battles(uint256):(uint256,string,uint8,address,uint256,(uint256[2],uint256[2],uint256[2],uint256[2]))",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Battle__battlesResult(
        value[0].toBigInt(),
        value[1].toString(),
        value[2].toI32(),
        value[3].toAddress(),
        value[4].toBigInt(),
        changetype<Battle__battlesResultBattleStatsStruct>(value[5].toTuple())
      )
    );
  }

  feeCollected(): BigInt {
    let result = super.call("feeCollected", "feeCollected():(uint256)", []);

    return result[0].toBigInt();
  }

  try_feeCollected(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("feeCollected", "feeCollected():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getActiveBattlesCount(): BigInt {
    let result = super.call(
      "getActiveBattlesCount",
      "getActiveBattlesCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getActiveBattlesCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getActiveBattlesCount",
      "getActiveBattlesCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getActiveBattlesId(): Array<BigInt> {
    let result = super.call(
      "getActiveBattlesId",
      "getActiveBattlesId():(uint256[])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getActiveBattlesId(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getActiveBattlesId",
      "getActiveBattlesId():(uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getBattle(_battleId: BigInt): Battle__getBattleResultValue0Struct {
    let result = super.call(
      "getBattle",
      "getBattle(uint256):((uint256,string,address[2],uint256[2],uint256[2],uint256[2],uint8,address,bool[2],uint256,(uint256[2],uint256[2],uint256[2],uint256[2])))",
      [ethereum.Value.fromUnsignedBigInt(_battleId)]
    );

    return changetype<Battle__getBattleResultValue0Struct>(result[0].toTuple());
  }

  try_getBattle(
    _battleId: BigInt
  ): ethereum.CallResult<Battle__getBattleResultValue0Struct> {
    let result = super.tryCall(
      "getBattle",
      "getBattle(uint256):((uint256,string,address[2],uint256[2],uint256[2],uint256[2],uint8,address,bool[2],uint256,(uint256[2],uint256[2],uint256[2],uint256[2])))",
      [ethereum.Value.fromUnsignedBigInt(_battleId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Battle__getBattleResultValue0Struct>(value[0].toTuple())
    );
  }

  getBattleMoves(battleId: BigInt): Array<BigInt> {
    let result = super.call(
      "getBattleMoves",
      "getBattleMoves(uint256):(uint256[2])",
      [ethereum.Value.fromUnsignedBigInt(battleId)]
    );

    return result[0].toBigIntArray();
  }

  try_getBattleMoves(battleId: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getBattleMoves",
      "getBattleMoves(uint256):(uint256[2])",
      [ethereum.Value.fromUnsignedBigInt(battleId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getBattleParticipants(battleId: BigInt): Array<Address> {
    let result = super.call(
      "getBattleParticipants",
      "getBattleParticipants(uint256):(address[2])",
      [ethereum.Value.fromUnsignedBigInt(battleId)]
    );

    return result[0].toAddressArray();
  }

  try_getBattleParticipants(
    battleId: BigInt
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getBattleParticipants",
      "getBattleParticipants(uint256):(address[2])",
      [ethereum.Value.fromUnsignedBigInt(battleId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getBattleSummary(_battleId: BigInt): Battle__getBattleSummaryResult {
    let result = super.call(
      "getBattleSummary",
      "getBattleSummary(uint256):(uint256,uint256[2],uint256[2],uint256[2],address,address)",
      [ethereum.Value.fromUnsignedBigInt(_battleId)]
    );

    return new Battle__getBattleSummaryResult(
      result[0].toBigInt(),
      result[1].toBigIntArray(),
      result[2].toBigIntArray(),
      result[3].toBigIntArray(),
      result[4].toAddress(),
      result[5].toAddress()
    );
  }

  try_getBattleSummary(
    _battleId: BigInt
  ): ethereum.CallResult<Battle__getBattleSummaryResult> {
    let result = super.tryCall(
      "getBattleSummary",
      "getBattleSummary(uint256):(uint256,uint256[2],uint256[2],uint256[2],address,address)",
      [ethereum.Value.fromUnsignedBigInt(_battleId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Battle__getBattleSummaryResult(
        value[0].toBigInt(),
        value[1].toBigIntArray(),
        value[2].toBigIntArray(),
        value[3].toBigIntArray(),
        value[4].toAddress(),
        value[5].toAddress()
      )
    );
  }

  getCharacterHealth(battleId: BigInt, player: Address): BigInt {
    let result = super.call(
      "getCharacterHealth",
      "getCharacterHealth(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(battleId),
        ethereum.Value.fromAddress(player)
      ]
    );

    return result[0].toBigInt();
  }

  try_getCharacterHealth(
    battleId: BigInt,
    player: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCharacterHealth",
      "getCharacterHealth(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(battleId),
        ethereum.Value.fromAddress(player)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCharacterProxy(
    battleId: BigInt,
    player: Address
  ): Battle__getCharacterProxyResultValue0Struct {
    let result = super.call(
      "getCharacterProxy",
      "getCharacterProxy(uint256,address):((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256[]))",
      [
        ethereum.Value.fromUnsignedBigInt(battleId),
        ethereum.Value.fromAddress(player)
      ]
    );

    return changetype<Battle__getCharacterProxyResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getCharacterProxy(
    battleId: BigInt,
    player: Address
  ): ethereum.CallResult<Battle__getCharacterProxyResultValue0Struct> {
    let result = super.tryCall(
      "getCharacterProxy",
      "getCharacterProxy(uint256,address):((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256[]))",
      [
        ethereum.Value.fromUnsignedBigInt(battleId),
        ethereum.Value.fromAddress(player)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Battle__getCharacterProxyResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getCharacterProxyActiveEffects(
    battleId: BigInt,
    player: Address
  ): Battle__getCharacterProxyActiveEffectsResult {
    let result = super.call(
      "getCharacterProxyActiveEffects",
      "getCharacterProxyActiveEffects(uint256,address):(uint256[],uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(battleId),
        ethereum.Value.fromAddress(player)
      ]
    );

    return new Battle__getCharacterProxyActiveEffectsResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray()
    );
  }

  try_getCharacterProxyActiveEffects(
    battleId: BigInt,
    player: Address
  ): ethereum.CallResult<Battle__getCharacterProxyActiveEffectsResult> {
    let result = super.tryCall(
      "getCharacterProxyActiveEffects",
      "getCharacterProxyActiveEffects(uint256,address):(uint256[],uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(battleId),
        ethereum.Value.fromAddress(player)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Battle__getCharacterProxyActiveEffectsResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray()
      )
    );
  }

  leagueRewards(): BigInt {
    let result = super.call("leagueRewards", "leagueRewards():(uint256)", []);

    return result[0].toBigInt();
  }

  try_leagueRewards(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "leagueRewards",
      "leagueRewards():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  playerCredit(param0: Address): BigInt {
    let result = super.call("playerCredit", "playerCredit(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_playerCredit(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "playerCredit",
      "playerCredit(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  playerOngoingBattle(param0: Address): BigInt {
    let result = super.call(
      "playerOngoingBattle",
      "playerOngoingBattle(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_playerOngoingBattle(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "playerOngoingBattle",
      "playerOngoingBattle(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  staminaCost(): BigInt {
    let result = super.call("staminaCost", "staminaCost():(uint256)", []);

    return result[0].toBigInt();
  }

  try_staminaCost(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("staminaCost", "staminaCost():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _characterContractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _battleSkillsContractAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class CancelBattleCall extends ethereum.Call {
  get inputs(): CancelBattleCall__Inputs {
    return new CancelBattleCall__Inputs(this);
  }

  get outputs(): CancelBattleCall__Outputs {
    return new CancelBattleCall__Outputs(this);
  }
}

export class CancelBattleCall__Inputs {
  _call: CancelBattleCall;

  constructor(call: CancelBattleCall) {
    this._call = call;
  }

  get _battleId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelBattleCall__Outputs {
  _call: CancelBattleCall;

  constructor(call: CancelBattleCall) {
    this._call = call;
  }
}

export class CreateBattleCall extends ethereum.Call {
  get inputs(): CreateBattleCall__Inputs {
    return new CreateBattleCall__Inputs(this);
  }

  get outputs(): CreateBattleCall__Outputs {
    return new CreateBattleCall__Outputs(this);
  }
}

export class CreateBattleCall__Inputs {
  _call: CreateBattleCall;

  constructor(call: CreateBattleCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _characterTokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CreateBattleCall__Outputs {
  _call: CreateBattleCall;

  constructor(call: CreateBattleCall) {
    this._call = call;
  }
}

export class JoinBattleCall extends ethereum.Call {
  get inputs(): JoinBattleCall__Inputs {
    return new JoinBattleCall__Inputs(this);
  }

  get outputs(): JoinBattleCall__Outputs {
    return new JoinBattleCall__Outputs(this);
  }
}

export class JoinBattleCall__Inputs {
  _call: JoinBattleCall;

  constructor(call: JoinBattleCall) {
    this._call = call;
  }

  get battleId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get characterTokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class JoinBattleCall__Outputs {
  _call: JoinBattleCall;

  constructor(call: JoinBattleCall) {
    this._call = call;
  }
}

export class QuitBattleCall extends ethereum.Call {
  get inputs(): QuitBattleCall__Inputs {
    return new QuitBattleCall__Inputs(this);
  }

  get outputs(): QuitBattleCall__Outputs {
    return new QuitBattleCall__Outputs(this);
  }
}

export class QuitBattleCall__Inputs {
  _call: QuitBattleCall;

  constructor(call: QuitBattleCall) {
    this._call = call;
  }

  get _battleId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class QuitBattleCall__Outputs {
  _call: QuitBattleCall;

  constructor(call: QuitBattleCall) {
    this._call = call;
  }
}

export class SetOwnerCall extends ethereum.Call {
  get inputs(): SetOwnerCall__Inputs {
    return new SetOwnerCall__Inputs(this);
  }

  get outputs(): SetOwnerCall__Outputs {
    return new SetOwnerCall__Outputs(this);
  }
}

export class SetOwnerCall__Inputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOwnerCall__Outputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }
}

export class StoreStaminaCall extends ethereum.Call {
  get inputs(): StoreStaminaCall__Inputs {
    return new StoreStaminaCall__Inputs(this);
  }

  get outputs(): StoreStaminaCall__Outputs {
    return new StoreStaminaCall__Outputs(this);
  }
}

export class StoreStaminaCall__Inputs {
  _call: StoreStaminaCall;

  constructor(call: StoreStaminaCall) {
    this._call = call;
  }

  get _tokenId1(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _tokenId2(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StoreStaminaCall__Outputs {
  _call: StoreStaminaCall;

  constructor(call: StoreStaminaCall) {
    this._call = call;
  }
}

export class SubmitMoveCall extends ethereum.Call {
  get inputs(): SubmitMoveCall__Inputs {
    return new SubmitMoveCall__Inputs(this);
  }

  get outputs(): SubmitMoveCall__Outputs {
    return new SubmitMoveCall__Outputs(this);
  }
}

export class SubmitMoveCall__Inputs {
  _call: SubmitMoveCall;

  constructor(call: SubmitMoveCall) {
    this._call = call;
  }

  get battleId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get move(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get skillId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SubmitMoveCall__Outputs {
  _call: SubmitMoveCall;

  constructor(call: SubmitMoveCall) {
    this._call = call;
  }
}

export class UpdateStaminaCostCall extends ethereum.Call {
  get inputs(): UpdateStaminaCostCall__Inputs {
    return new UpdateStaminaCostCall__Inputs(this);
  }

  get outputs(): UpdateStaminaCostCall__Outputs {
    return new UpdateStaminaCostCall__Outputs(this);
  }
}

export class UpdateStaminaCostCall__Inputs {
  _call: UpdateStaminaCostCall;

  constructor(call: UpdateStaminaCostCall) {
    this._call = call;
  }

  get newCost(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateStaminaCostCall__Outputs {
  _call: UpdateStaminaCostCall;

  constructor(call: UpdateStaminaCostCall) {
    this._call = call;
  }
}
