// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Player extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Player entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Player must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Player", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Player | null {
    return changetype<Player | null>(store.get_in_block("Player", id));
  }

  static load(id: string): Player | null {
    return changetype<Player | null>(store.get("Player", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get battles(): Array<string> | null {
    let value = this.get("battles");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get characters(): Array<string> | null {
    let value = this.get("characters");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get totalDamageDealt(): BigInt {
    let value = this.get("totalDamageDealt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalDamageDealt(value: BigInt) {
    this.set("totalDamageDealt", Value.fromBigInt(value));
  }

  get totalDamageTaken(): BigInt {
    let value = this.get("totalDamageTaken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalDamageTaken(value: BigInt) {
    this.set("totalDamageTaken", Value.fromBigInt(value));
  }

  get wins(): i32 {
    let value = this.get("wins");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set wins(value: i32) {
    this.set("wins", Value.fromI32(value));
  }

  get losses(): i32 {
    let value = this.get("losses");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set losses(value: i32) {
    this.set("losses", Value.fromI32(value));
  }
}

export class Character extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Character entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Character must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Character", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Character | null {
    return changetype<Character | null>(store.get_in_block("Character", id));
  }

  static load(id: string): Character | null {
    return changetype<Character | null>(store.get("Character", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get battles(): Array<string> | null {
    let value = this.get("battles");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set battles(value: Array<string> | null) {
    if (!value) {
      this.unset("battles");
    } else {
      this.set("battles", Value.fromStringArray(<Array<string>>value));
    }
  }

  get totalDamageDealt(): BigInt {
    let value = this.get("totalDamageDealt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalDamageDealt(value: BigInt) {
    this.set("totalDamageDealt", Value.fromBigInt(value));
  }

  get totalDamageTaken(): BigInt {
    let value = this.get("totalDamageTaken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalDamageTaken(value: BigInt) {
    this.set("totalDamageTaken", Value.fromBigInt(value));
  }

  get level(): BigInt {
    let value = this.get("level");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set level(value: BigInt) {
    this.set("level", Value.fromBigInt(value));
  }

  get health(): BigInt {
    let value = this.get("health");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set health(value: BigInt) {
    this.set("health", Value.fromBigInt(value));
  }

  get mana(): BigInt {
    let value = this.get("mana");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set mana(value: BigInt) {
    this.set("mana", Value.fromBigInt(value));
  }

  get attack(): BigInt {
    let value = this.get("attack");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set attack(value: BigInt) {
    this.set("attack", Value.fromBigInt(value));
  }

  get defense(): BigInt {
    let value = this.get("defense");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set defense(value: BigInt) {
    this.set("defense", Value.fromBigInt(value));
  }

  get strength(): BigInt {
    let value = this.get("strength");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set strength(value: BigInt) {
    this.set("strength", Value.fromBigInt(value));
  }

  get dexterity(): BigInt {
    let value = this.get("dexterity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set dexterity(value: BigInt) {
    this.set("dexterity", Value.fromBigInt(value));
  }

  get intelligence(): BigInt {
    let value = this.get("intelligence");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set intelligence(value: BigInt) {
    this.set("intelligence", Value.fromBigInt(value));
  }

  get vitality(): BigInt {
    let value = this.get("vitality");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set vitality(value: BigInt) {
    this.set("vitality", Value.fromBigInt(value));
  }

  get accuracy(): BigInt {
    let value = this.get("accuracy");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set accuracy(value: BigInt) {
    this.set("accuracy", Value.fromBigInt(value));
  }

  get statPoints(): BigInt {
    let value = this.get("statPoints");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set statPoints(value: BigInt) {
    this.set("statPoints", Value.fromBigInt(value));
  }

  get stamina(): BigInt {
    let value = this.get("stamina");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set stamina(value: BigInt) {
    this.set("stamina", Value.fromBigInt(value));
  }

  get maxMana(): BigInt {
    let value = this.get("maxMana");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set maxMana(value: BigInt) {
    this.set("maxMana", Value.fromBigInt(value));
  }

  get lastStaminaUpdateTime(): BigInt {
    let value = this.get("lastStaminaUpdateTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastStaminaUpdateTime(value: BigInt) {
    this.set("lastStaminaUpdateTime", Value.fromBigInt(value));
  }

  get lastManaUpdateTime(): BigInt {
    let value = this.get("lastManaUpdateTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastManaUpdateTime(value: BigInt) {
    this.set("lastManaUpdateTime", Value.fromBigInt(value));
  }

  get typeId(): BigInt {
    let value = this.get("typeId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set typeId(value: BigInt) {
    this.set("typeId", Value.fromBigInt(value));
  }

  get experience(): BigInt {
    let value = this.get("experience");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set experience(value: BigInt) {
    this.set("experience", Value.fromBigInt(value));
  }

  get skills(): Array<string> | null {
    let value = this.get("skills");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get wins(): i32 {
    let value = this.get("wins");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set wins(value: i32) {
    this.set("wins", Value.fromI32(value));
  }

  get losses(): i32 {
    let value = this.get("losses");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set losses(value: i32) {
    this.set("losses", Value.fromI32(value));
  }
}

export class Skill extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Skill entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Skill must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Skill", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Skill | null {
    return changetype<Skill | null>(store.get_in_block("Skill", id));
  }

  static load(id: string): Skill | null {
    return changetype<Skill | null>(store.get("Skill", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get damage(): BigInt {
    let value = this.get("damage");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set damage(value: BigInt) {
    this.set("damage", Value.fromBigInt(value));
  }

  get manaCost(): BigInt {
    let value = this.get("manaCost");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set manaCost(value: BigInt) {
    this.set("manaCost", Value.fromBigInt(value));
  }

  get statusEffect(): string {
    let value = this.get("statusEffect");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set statusEffect(value: string) {
    this.set("statusEffect", Value.fromString(value));
  }

  get characters(): Array<string> | null {
    let value = this.get("characters");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }
}

export class StatusEffect extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StatusEffect entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type StatusEffect must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("StatusEffect", id.toString(), this);
    }
  }

  static loadInBlock(id: string): StatusEffect | null {
    return changetype<StatusEffect | null>(
      store.get_in_block("StatusEffect", id)
    );
  }

  static load(id: string): StatusEffect | null {
    return changetype<StatusEffect | null>(store.get("StatusEffect", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get isPositive(): boolean {
    let value = this.get("isPositive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isPositive(value: boolean) {
    this.set("isPositive", Value.fromBoolean(value));
  }

  get duration(): BigInt {
    let value = this.get("duration");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set duration(value: BigInt) {
    this.set("duration", Value.fromBigInt(value));
  }

  get attackBoost(): BigInt {
    let value = this.get("attackBoost");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set attackBoost(value: BigInt) {
    this.set("attackBoost", Value.fromBigInt(value));
  }

  get attackReduction(): BigInt {
    let value = this.get("attackReduction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set attackReduction(value: BigInt) {
    this.set("attackReduction", Value.fromBigInt(value));
  }

  get defenseBoost(): BigInt {
    let value = this.get("defenseBoost");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set defenseBoost(value: BigInt) {
    this.set("defenseBoost", Value.fromBigInt(value));
  }

  get defenseReduction(): BigInt {
    let value = this.get("defenseReduction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set defenseReduction(value: BigInt) {
    this.set("defenseReduction", Value.fromBigInt(value));
  }

  get healPerTurn(): BigInt {
    let value = this.get("healPerTurn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set healPerTurn(value: BigInt) {
    this.set("healPerTurn", Value.fromBigInt(value));
  }

  get damagePerTurn(): BigInt {
    let value = this.get("damagePerTurn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set damagePerTurn(value: BigInt) {
    this.set("damagePerTurn", Value.fromBigInt(value));
  }

  get isStun(): boolean {
    let value = this.get("isStun");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isStun(value: boolean) {
    this.set("isStun", Value.fromBoolean(value));
  }

  get skills(): Array<string> | null {
    let value = this.get("skills");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }
}

export class CharacterSkill extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CharacterSkill entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CharacterSkill must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CharacterSkill", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CharacterSkill | null {
    return changetype<CharacterSkill | null>(
      store.get_in_block("CharacterSkill", id)
    );
  }

  static load(id: string): CharacterSkill | null {
    return changetype<CharacterSkill | null>(store.get("CharacterSkill", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get character(): string {
    let value = this.get("character");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set character(value: string) {
    this.set("character", Value.fromString(value));
  }

  get skill(): string {
    let value = this.get("skill");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set skill(value: string) {
    this.set("skill", Value.fromString(value));
  }

  get quantity(): BigInt {
    let value = this.get("quantity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set quantity(value: BigInt) {
    this.set("quantity", Value.fromBigInt(value));
  }
}

export class Item extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Item entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Item must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Item", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Item | null {
    return changetype<Item | null>(store.get_in_block("Item", id));
  }

  static load(id: string): Item | null {
    return changetype<Item | null>(store.get("Item", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get attack(): BigInt {
    let value = this.get("attack");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set attack(value: BigInt) {
    this.set("attack", Value.fromBigInt(value));
  }

  get defense(): BigInt {
    let value = this.get("defense");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set defense(value: BigInt) {
    this.set("defense", Value.fromBigInt(value));
  }

  get health(): BigInt {
    let value = this.get("health");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set health(value: BigInt) {
    this.set("health", Value.fromBigInt(value));
  }

  get mana(): BigInt {
    let value = this.get("mana");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set mana(value: BigInt) {
    this.set("mana", Value.fromBigInt(value));
  }

  get skill(): BigInt {
    let value = this.get("skill");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set skill(value: BigInt) {
    this.set("skill", Value.fromBigInt(value));
  }

  get itemType(): string {
    let value = this.get("itemType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set itemType(value: string) {
    this.set("itemType", Value.fromString(value));
  }

  get characters(): Array<string> | null {
    let value = this.get("characters");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }
}

export class CharacterItem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CharacterItem entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CharacterItem must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CharacterItem", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CharacterItem | null {
    return changetype<CharacterItem | null>(
      store.get_in_block("CharacterItem", id)
    );
  }

  static load(id: string): CharacterItem | null {
    return changetype<CharacterItem | null>(store.get("CharacterItem", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get character(): string {
    let value = this.get("character");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set character(value: string) {
    this.set("character", Value.fromString(value));
  }

  get item(): string {
    let value = this.get("item");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set item(value: string) {
    this.set("item", Value.fromString(value));
  }

  get quantity(): BigInt {
    let value = this.get("quantity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set quantity(value: BigInt) {
    this.set("quantity", Value.fromBigInt(value));
  }
}

export class CharacterProxy extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CharacterProxy entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CharacterProxy must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CharacterProxy", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CharacterProxy | null {
    return changetype<CharacterProxy | null>(
      store.get_in_block("CharacterProxy", id)
    );
  }

  static load(id: string): CharacterProxy | null {
    return changetype<CharacterProxy | null>(store.get("CharacterProxy", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get battleId(): BigInt {
    let value = this.get("battleId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set battleId(value: BigInt) {
    this.set("battleId", Value.fromBigInt(value));
  }

  get player(): string {
    let value = this.get("player");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set player(value: string) {
    this.set("player", Value.fromString(value));
  }

  get character(): string {
    let value = this.get("character");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set character(value: string) {
    this.set("character", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get health(): BigInt {
    let value = this.get("health");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set health(value: BigInt) {
    this.set("health", Value.fromBigInt(value));
  }

  get attack(): BigInt {
    let value = this.get("attack");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set attack(value: BigInt) {
    this.set("attack", Value.fromBigInt(value));
  }

  get defense(): BigInt {
    let value = this.get("defense");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set defense(value: BigInt) {
    this.set("defense", Value.fromBigInt(value));
  }

  get mana(): BigInt {
    let value = this.get("mana");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set mana(value: BigInt) {
    this.set("mana", Value.fromBigInt(value));
  }

  get typeId(): BigInt {
    let value = this.get("typeId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set typeId(value: BigInt) {
    this.set("typeId", Value.fromBigInt(value));
  }

  get equippedSkills(): Array<BigInt> {
    let value = this.get("equippedSkills");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set equippedSkills(value: Array<BigInt>) {
    this.set("equippedSkills", Value.fromBigIntArray(value));
  }

  get activeEffects(): Array<string> | null {
    let value = this.get("activeEffects");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }
}

export class ActiveEffect extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ActiveEffect entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ActiveEffect must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ActiveEffect", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ActiveEffect | null {
    return changetype<ActiveEffect | null>(
      store.get_in_block("ActiveEffect", id)
    );
  }

  static load(id: string): ActiveEffect | null {
    return changetype<ActiveEffect | null>(store.get("ActiveEffect", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get characterProxy(): string {
    let value = this.get("characterProxy");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set characterProxy(value: string) {
    this.set("characterProxy", Value.fromString(value));
  }

  get statusEffectId(): BigInt {
    let value = this.get("statusEffectId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set statusEffectId(value: BigInt) {
    this.set("statusEffectId", Value.fromBigInt(value));
  }

  get duration(): BigInt {
    let value = this.get("duration");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set duration(value: BigInt) {
    this.set("duration", Value.fromBigInt(value));
  }
}

export class Battle extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Battle entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Battle must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Battle", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Battle | null {
    return changetype<Battle | null>(store.get_in_block("Battle", id));
  }

  static load(id: string): Battle | null {
    return changetype<Battle | null>(store.get("Battle", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get creator(): string {
    let value = this.get("creator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get players(): Array<string> | null {
    let value = this.get("players");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set players(value: Array<string> | null) {
    if (!value) {
      this.unset("players");
    } else {
      this.set("players", Value.fromStringArray(<Array<string>>value));
    }
  }

  get characters(): Array<string> | null {
    let value = this.get("characters");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set characters(value: Array<string> | null) {
    if (!value) {
      this.unset("characters");
    } else {
      this.set("characters", Value.fromStringArray(<Array<string>>value));
    }
  }

  get status(): string {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get winner(): string | null {
    let value = this.get("winner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set winner(value: string | null) {
    if (!value) {
      this.unset("winner");
    } else {
      this.set("winner", Value.fromString(<string>value));
    }
  }

  get loser(): string | null {
    let value = this.get("loser");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set loser(value: string | null) {
    if (!value) {
      this.unset("loser");
    } else {
      this.set("loser", Value.fromString(<string>value));
    }
  }

  get rounds(): Array<string> | null {
    let value = this.get("rounds");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get totalDamageDealt(): Array<BigInt> {
    let value = this.get("totalDamageDealt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set totalDamageDealt(value: Array<BigInt>) {
    this.set("totalDamageDealt", Value.fromBigIntArray(value));
  }

  get totalDamageTaken(): Array<BigInt> {
    let value = this.get("totalDamageTaken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set totalDamageTaken(value: Array<BigInt>) {
    this.set("totalDamageTaken", Value.fromBigIntArray(value));
  }

  get roundNumber(): i32 {
    let value = this.get("roundNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set roundNumber(value: i32) {
    this.set("roundNumber", Value.fromI32(value));
  }
}

export class Round extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Round entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Round must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Round", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Round | null {
    return changetype<Round | null>(store.get_in_block("Round", id));
  }

  static load(id: string): Round | null {
    return changetype<Round | null>(store.get("Round", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get battle(): string {
    let value = this.get("battle");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set battle(value: string) {
    this.set("battle", Value.fromString(value));
  }

  get damagedPlayers(): Array<string> {
    let value = this.get("damagedPlayers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set damagedPlayers(value: Array<string>) {
    this.set("damagedPlayers", Value.fromStringArray(value));
  }

  get damages(): Array<string> | null {
    let value = this.get("damages");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get moves(): Array<string> | null {
    let value = this.get("moves");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get skillsUsed(): Array<string> | null {
    let value = this.get("skillsUsed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set skillsUsed(value: Array<string> | null) {
    if (!value) {
      this.unset("skillsUsed");
    } else {
      this.set("skillsUsed", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Move extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Move entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Move must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Move", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Move | null {
    return changetype<Move | null>(store.get_in_block("Move", id));
  }

  static load(id: string): Move | null {
    return changetype<Move | null>(store.get("Move", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get round(): string {
    let value = this.get("round");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set round(value: string) {
    this.set("round", Value.fromString(value));
  }

  get player(): string {
    let value = this.get("player");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set player(value: string) {
    this.set("player", Value.fromString(value));
  }

  get moveType(): string {
    let value = this.get("moveType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set moveType(value: string) {
    this.set("moveType", Value.fromString(value));
  }

  get attackMultiplier(): BigInt {
    let value = this.get("attackMultiplier");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set attackMultiplier(value: BigInt) {
    this.set("attackMultiplier", Value.fromBigInt(value));
  }
}

export class Damage extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Damage entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Damage must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Damage", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Damage | null {
    return changetype<Damage | null>(store.get_in_block("Damage", id));
  }

  static load(id: string): Damage | null {
    return changetype<Damage | null>(store.get("Damage", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get round(): string {
    let value = this.get("round");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set round(value: string) {
    this.set("round", Value.fromString(value));
  }

  get player(): string {
    let value = this.get("player");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set player(value: string) {
    this.set("player", Value.fromString(value));
  }

  get damageDealt(): BigInt {
    let value = this.get("damageDealt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set damageDealt(value: BigInt) {
    this.set("damageDealt", Value.fromBigInt(value));
  }

  get damageTaken(): BigInt {
    let value = this.get("damageTaken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set damageTaken(value: BigInt) {
    this.set("damageTaken", Value.fromBigInt(value));
  }
}
