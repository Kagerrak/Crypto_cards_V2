// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class CharacterRecoveryStats extends ethereum.Event {
  get params(): CharacterRecoveryStats__Params {
    return new CharacterRecoveryStats__Params(this);
  }
}

export class CharacterRecoveryStats__Params {
  _event: CharacterRecoveryStats;

  constructor(event: CharacterRecoveryStats) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get stamina(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get maxMana(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get lastStaminaUpdateTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get lastManaUpdateTime(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class CharacterStatsEvent extends ethereum.Event {
  get params(): CharacterStatsEvent__Params {
    return new CharacterStatsEvent__Params(this);
  }
}

export class CharacterStatsEvent__Params {
  _event: CharacterStatsEvent;

  constructor(event: CharacterStatsEvent) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get level(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get experience(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get health(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get mana(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get attack(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get defense(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get strength(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get dexterity(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get intelligence(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }

  get vitality(): BigInt {
    return this._event.parameters[10].value.toBigInt();
  }

  get accuracy(): BigInt {
    return this._event.parameters[11].value.toBigInt();
  }

  get statPoints(): BigInt {
    return this._event.parameters[12].value.toBigInt();
  }
}

export class CharacterStatsUpdated extends ethereum.Event {
  get params(): CharacterStatsUpdated__Params {
    return new CharacterStatsUpdated__Params(this);
  }
}

export class CharacterStatsUpdated__Params {
  _event: CharacterStatsUpdated;

  constructor(event: CharacterStatsUpdated) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get strength(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get dexterity(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get intelligence(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get vitality(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class CharacterXPUpdated extends ethereum.Event {
  get params(): CharacterXPUpdated__Params {
    return new CharacterXPUpdated__Params(this);
  }
}

export class CharacterXPUpdated__Params {
  _event: CharacterXPUpdated;

  constructor(event: CharacterXPUpdated) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get xp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ClassEquipped extends ethereum.Event {
  get params(): ClassEquipped__Params {
    return new ClassEquipped__Params(this);
  }
}

export class ClassEquipped__Params {
  _event: ClassEquipped;

  constructor(event: ClassEquipped) {
    this._event = event;
  }

  get characterTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get classId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ClassUnequipped extends ethereum.Event {
  get params(): ClassUnequipped__Params {
    return new ClassUnequipped__Params(this);
  }
}

export class ClassUnequipped__Params {
  _event: ClassUnequipped;

  constructor(event: ClassUnequipped) {
    this._event = event;
  }

  get characterTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get classId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ContractURIUpdated extends ethereum.Event {
  get params(): ContractURIUpdated__Params {
    return new ContractURIUpdated__Params(this);
  }
}

export class ContractURIUpdated__Params {
  _event: ContractURIUpdated;

  constructor(event: ContractURIUpdated) {
    this._event = event;
  }

  get prevURI(): string {
    return this._event.parameters[0].value.toString();
  }

  get newURI(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class DefaultRoyalty extends ethereum.Event {
  get params(): DefaultRoyalty__Params {
    return new DefaultRoyalty__Params(this);
  }
}

export class DefaultRoyalty__Params {
  _event: DefaultRoyalty;

  constructor(event: DefaultRoyalty) {
    this._event = event;
  }

  get newRoyaltyRecipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newRoyaltyBps(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ItemEquipped extends ethereum.Event {
  get params(): ItemEquipped__Params {
    return new ItemEquipped__Params(this);
  }
}

export class ItemEquipped__Params {
  _event: ItemEquipped;

  constructor(event: ItemEquipped) {
    this._event = event;
  }

  get characterTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get itemTokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ItemUnequipped extends ethereum.Event {
  get params(): ItemUnequipped__Params {
    return new ItemUnequipped__Params(this);
  }
}

export class ItemUnequipped__Params {
  _event: ItemUnequipped;

  constructor(event: ItemUnequipped) {
    this._event = event;
  }

  get characterTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get itemTokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ManaUpdated extends ethereum.Event {
  get params(): ManaUpdated__Params {
    return new ManaUpdated__Params(this);
  }
}

export class ManaUpdated__Params {
  _event: ManaUpdated;

  constructor(event: ManaUpdated) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get mana(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewCharacter extends ethereum.Event {
  get params(): NewCharacter__Params {
    return new NewCharacter__Params(this);
  }
}

export class NewCharacter__Params {
  _event: NewCharacter;

  constructor(event: NewCharacter) {
    this._event = event;
  }

  get player(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get typeId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OperatorRestriction extends ethereum.Event {
  get params(): OperatorRestriction__Params {
    return new OperatorRestriction__Params(this);
  }
}

export class OperatorRestriction__Params {
  _event: OperatorRestriction;

  constructor(event: OperatorRestriction) {
    this._event = event;
  }

  get restriction(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class OwnerUpdated extends ethereum.Event {
  get params(): OwnerUpdated__Params {
    return new OwnerUpdated__Params(this);
  }
}

export class OwnerUpdated__Params {
  _event: OwnerUpdated;

  constructor(event: OwnerUpdated) {
    this._event = event;
  }

  get prevOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RoyaltyForToken extends ethereum.Event {
  get params(): RoyaltyForToken__Params {
    return new RoyaltyForToken__Params(this);
  }
}

export class RoyaltyForToken__Params {
  _event: RoyaltyForToken;

  constructor(event: RoyaltyForToken) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get royaltyRecipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get royaltyBps(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SkillEquipped extends ethereum.Event {
  get params(): SkillEquipped__Params {
    return new SkillEquipped__Params(this);
  }
}

export class SkillEquipped__Params {
  _event: SkillEquipped;

  constructor(event: SkillEquipped) {
    this._event = event;
  }

  get characterTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get skillId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SkillUnequipped extends ethereum.Event {
  get params(): SkillUnequipped__Params {
    return new SkillUnequipped__Params(this);
  }
}

export class SkillUnequipped__Params {
  _event: SkillUnequipped;

  constructor(event: SkillUnequipped) {
    this._event = event;
  }

  get characterTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get skillId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StaminaUpdated extends ethereum.Event {
  get params(): StaminaUpdated__Params {
    return new StaminaUpdated__Params(this);
  }
}

export class StaminaUpdated__Params {
  _event: StaminaUpdated;

  constructor(event: StaminaUpdated) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get stamina(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Character__charStatsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;
  value10: BigInt;
  value11: BigInt;
  value12: BigInt;
  value13: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt,
    value10: BigInt,
    value11: BigInt,
    value12: BigInt,
    value13: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
    this.value12 = value12;
    this.value13 = value13;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    map.set("value11", ethereum.Value.fromUnsignedBigInt(this.value11));
    map.set("value12", ethereum.Value.fromUnsignedBigInt(this.value12));
    map.set("value13", ethereum.Value.fromUnsignedBigInt(this.value13));
    return map;
  }

  getTokenId(): BigInt {
    return this.value0;
  }

  getLevel(): BigInt {
    return this.value1;
  }

  getExperience(): BigInt {
    return this.value2;
  }

  getHealth(): BigInt {
    return this.value3;
  }

  getMana(): BigInt {
    return this.value4;
  }

  getAttack(): BigInt {
    return this.value5;
  }

  getDefense(): BigInt {
    return this.value6;
  }

  getStrength(): BigInt {
    return this.value7;
  }

  getDexterity(): BigInt {
    return this.value8;
  }

  getIntelligence(): BigInt {
    return this.value9;
  }

  getVitality(): BigInt {
    return this.value10;
  }

  getAccuracy(): BigInt {
    return this.value11;
  }

  getStatPoints(): BigInt {
    return this.value12;
  }

  getTypeId(): BigInt {
    return this.value13;
  }
}

export class Character__charTypesResult {
  value0: BigInt;
  value1: string;
  value2: string;

  constructor(value0: BigInt, value1: string, value2: string) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    return map;
  }

  getTypeId(): BigInt {
    return this.value0;
  }

  getCharacterType(): string {
    return this.value1;
  }

  getUri(): string {
    return this.value2;
  }
}

export class Character__characterStatsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;
  value10: BigInt;
  value11: BigInt;
  value12: BigInt;
  value13: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt,
    value10: BigInt,
    value11: BigInt,
    value12: BigInt,
    value13: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
    this.value12 = value12;
    this.value13 = value13;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    map.set("value11", ethereum.Value.fromUnsignedBigInt(this.value11));
    map.set("value12", ethereum.Value.fromUnsignedBigInt(this.value12));
    map.set("value13", ethereum.Value.fromUnsignedBigInt(this.value13));
    return map;
  }

  getTokenId(): BigInt {
    return this.value0;
  }

  getLevel(): BigInt {
    return this.value1;
  }

  getExperience(): BigInt {
    return this.value2;
  }

  getHealth(): BigInt {
    return this.value3;
  }

  getMana(): BigInt {
    return this.value4;
  }

  getAttack(): BigInt {
    return this.value5;
  }

  getDefense(): BigInt {
    return this.value6;
  }

  getStrength(): BigInt {
    return this.value7;
  }

  getDexterity(): BigInt {
    return this.value8;
  }

  getIntelligence(): BigInt {
    return this.value9;
  }

  getVitality(): BigInt {
    return this.value10;
  }

  getAccuracy(): BigInt {
    return this.value11;
  }

  getStatPoints(): BigInt {
    return this.value12;
  }

  getTypeId(): BigInt {
    return this.value13;
  }
}

export class Character__getCharacterResultValue0Struct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get level(): BigInt {
    return this[1].toBigInt();
  }

  get experience(): BigInt {
    return this[2].toBigInt();
  }

  get health(): BigInt {
    return this[3].toBigInt();
  }

  get mana(): BigInt {
    return this[4].toBigInt();
  }

  get attack(): BigInt {
    return this[5].toBigInt();
  }

  get defense(): BigInt {
    return this[6].toBigInt();
  }

  get strength(): BigInt {
    return this[7].toBigInt();
  }

  get dexterity(): BigInt {
    return this[8].toBigInt();
  }

  get intelligence(): BigInt {
    return this[9].toBigInt();
  }

  get vitality(): BigInt {
    return this[10].toBigInt();
  }

  get accuracy(): BigInt {
    return this[11].toBigInt();
  }

  get statPoints(): BigInt {
    return this[12].toBigInt();
  }

  get typeId(): BigInt {
    return this[13].toBigInt();
  }
}

export class Character__getDefaultRoyaltyInfoResult {
  value0: Address;
  value1: i32;

  constructor(value0: Address, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    return map;
  }

  getValue0(): Address {
    return this.value0;
  }

  getValue1(): i32 {
    return this.value1;
  }
}

export class Character__getRecoveryStatsResultValue0Struct extends ethereum.Tuple {
  get stamina(): BigInt {
    return this[0].toBigInt();
  }

  get maxMana(): BigInt {
    return this[1].toBigInt();
  }

  get lastStaminaUpdateTime(): BigInt {
    return this[2].toBigInt();
  }

  get lastManaUpdateTime(): BigInt {
    return this[3].toBigInt();
  }
}

export class Character__getRoyaltyInfoForTokenResult {
  value0: Address;
  value1: i32;

  constructor(value0: Address, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    return map;
  }

  getValue0(): Address {
    return this.value0;
  }

  getValue1(): i32 {
    return this.value1;
  }
}

export class Character__royaltyInfoResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getReceiver(): Address {
    return this.value0;
  }

  getRoyaltyAmount(): BigInt {
    return this.value1;
  }
}

export class Character extends ethereum.SmartContract {
  static bind(address: Address): Character {
    return new Character("Character", address);
  }

  OPERATOR_FILTER_REGISTRY(): Address {
    let result = super.call(
      "OPERATOR_FILTER_REGISTRY",
      "OPERATOR_FILTER_REGISTRY():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_OPERATOR_FILTER_REGISTRY(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "OPERATOR_FILTER_REGISTRY",
      "OPERATOR_FILTER_REGISTRY():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  battleContractAddress(): Address {
    let result = super.call(
      "battleContractAddress",
      "battleContractAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_battleContractAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "battleContractAddress",
      "battleContractAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  battleItems(): Address {
    let result = super.call("battleItems", "battleItems():(address)", []);

    return result[0].toAddress();
  }

  try_battleItems(): ethereum.CallResult<Address> {
    let result = super.tryCall("battleItems", "battleItems():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  battleSkills(): Address {
    let result = super.call("battleSkills", "battleSkills():(address)", []);

    return result[0].toAddress();
  }

  try_battleSkills(): ethereum.CallResult<Address> {
    let result = super.tryCall("battleSkills", "battleSkills():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  calculateExperienceRequired(level: BigInt): BigInt {
    let result = super.call(
      "calculateExperienceRequired",
      "calculateExperienceRequired(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(level)]
    );

    return result[0].toBigInt();
  }

  try_calculateExperienceRequired(level: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateExperienceRequired",
      "calculateExperienceRequired(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(level)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  charStats(param0: BigInt): Character__charStatsResult {
    let result = super.call(
      "charStats",
      "charStats(uint256):(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Character__charStatsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toBigInt(),
      result[11].toBigInt(),
      result[12].toBigInt(),
      result[13].toBigInt()
    );
  }

  try_charStats(
    param0: BigInt
  ): ethereum.CallResult<Character__charStatsResult> {
    let result = super.tryCall(
      "charStats",
      "charStats(uint256):(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Character__charStatsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toBigInt(),
        value[11].toBigInt(),
        value[12].toBigInt(),
        value[13].toBigInt()
      )
    );
  }

  charTypes(param0: BigInt): Character__charTypesResult {
    let result = super.call(
      "charTypes",
      "charTypes(uint256):(uint256,string,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Character__charTypesResult(
      result[0].toBigInt(),
      result[1].toString(),
      result[2].toString()
    );
  }

  try_charTypes(
    param0: BigInt
  ): ethereum.CallResult<Character__charTypesResult> {
    let result = super.tryCall(
      "charTypes",
      "charTypes(uint256):(uint256,string,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Character__charTypesResult(
        value[0].toBigInt(),
        value[1].toString(),
        value[2].toString()
      )
    );
  }

  characterClasses(): Address {
    let result = super.call(
      "characterClasses",
      "characterClasses():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_characterClasses(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "characterClasses",
      "characterClasses():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  characterEquips(param0: BigInt): BigInt {
    let result = super.call(
      "characterEquips",
      "characterEquips(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_characterEquips(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "characterEquips",
      "characterEquips(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  characterStats(param0: BigInt): Character__characterStatsResult {
    let result = super.call(
      "characterStats",
      "characterStats(uint256):(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Character__characterStatsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toBigInt(),
      result[11].toBigInt(),
      result[12].toBigInt(),
      result[13].toBigInt()
    );
  }

  try_characterStats(
    param0: BigInt
  ): ethereum.CallResult<Character__characterStatsResult> {
    let result = super.tryCall(
      "characterStats",
      "characterStats(uint256):(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Character__characterStatsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toBigInt(),
        value[11].toBigInt(),
        value[12].toBigInt(),
        value[13].toBigInt()
      )
    );
  }

  contractURI(): string {
    let result = super.call("contractURI", "contractURI():(string)", []);

    return result[0].toString();
  }

  try_contractURI(): ethereum.CallResult<string> {
    let result = super.tryCall("contractURI", "contractURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBaseURICount(): BigInt {
    let result = super.call(
      "getBaseURICount",
      "getBaseURICount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getBaseURICount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBaseURICount",
      "getBaseURICount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBatchIdAtIndex(_index: BigInt): BigInt {
    let result = super.call(
      "getBatchIdAtIndex",
      "getBatchIdAtIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );

    return result[0].toBigInt();
  }

  try_getBatchIdAtIndex(_index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBatchIdAtIndex",
      "getBatchIdAtIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCharacter(_tokenId: BigInt): Character__getCharacterResultValue0Struct {
    let result = super.call(
      "getCharacter",
      "getCharacter(uint256):((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );

    return changetype<Character__getCharacterResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getCharacter(
    _tokenId: BigInt
  ): ethereum.CallResult<Character__getCharacterResultValue0Struct> {
    let result = super.tryCall(
      "getCharacter",
      "getCharacter(uint256):((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Character__getCharacterResultValue0Struct>(value[0].toTuple())
    );
  }

  getCharacterAttack(tokenId: BigInt): BigInt {
    let result = super.call(
      "getCharacterAttack",
      "getCharacterAttack(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBigInt();
  }

  try_getCharacterAttack(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCharacterAttack",
      "getCharacterAttack(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCharacterDefense(tokenId: BigInt): BigInt {
    let result = super.call(
      "getCharacterDefense",
      "getCharacterDefense(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBigInt();
  }

  try_getCharacterDefense(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCharacterDefense",
      "getCharacterDefense(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCharacterHealth(tokenId: BigInt): BigInt {
    let result = super.call(
      "getCharacterHealth",
      "getCharacterHealth(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBigInt();
  }

  try_getCharacterHealth(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCharacterHealth",
      "getCharacterHealth(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCharacterLevel(tokenId: BigInt): BigInt {
    let result = super.call(
      "getCharacterLevel",
      "getCharacterLevel(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBigInt();
  }

  try_getCharacterLevel(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCharacterLevel",
      "getCharacterLevel(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCharacterType(tokenId: BigInt): BigInt {
    let result = super.call(
      "getCharacterType",
      "getCharacterType(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBigInt();
  }

  try_getCharacterType(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCharacterType",
      "getCharacterType(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDefaultRoyaltyInfo(): Character__getDefaultRoyaltyInfoResult {
    let result = super.call(
      "getDefaultRoyaltyInfo",
      "getDefaultRoyaltyInfo():(address,uint16)",
      []
    );

    return new Character__getDefaultRoyaltyInfoResult(
      result[0].toAddress(),
      result[1].toI32()
    );
  }

  try_getDefaultRoyaltyInfo(): ethereum.CallResult<
    Character__getDefaultRoyaltyInfoResult
  > {
    let result = super.tryCall(
      "getDefaultRoyaltyInfo",
      "getDefaultRoyaltyInfo():(address,uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Character__getDefaultRoyaltyInfoResult(
        value[0].toAddress(),
        value[1].toI32()
      )
    );
  }

  getEquippedClass(characterTokenId: BigInt): BigInt {
    let result = super.call(
      "getEquippedClass",
      "getEquippedClass(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(characterTokenId)]
    );

    return result[0].toBigInt();
  }

  try_getEquippedClass(characterTokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEquippedClass",
      "getEquippedClass(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(characterTokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEquippedItem(characterTokenId: BigInt, itemType: i32): BigInt {
    let result = super.call(
      "getEquippedItem",
      "getEquippedItem(uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(characterTokenId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(itemType))
      ]
    );

    return result[0].toBigInt();
  }

  try_getEquippedItem(
    characterTokenId: BigInt,
    itemType: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEquippedItem",
      "getEquippedItem(uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(characterTokenId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(itemType))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEquippedSkills(characterTokenId: BigInt): Array<BigInt> {
    let result = super.call(
      "getEquippedSkills",
      "getEquippedSkills(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(characterTokenId)]
    );

    return result[0].toBigIntArray();
  }

  try_getEquippedSkills(
    characterTokenId: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getEquippedSkills",
      "getEquippedSkills(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(characterTokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getMana(tokenId: BigInt): BigInt {
    let result = super.call("getMana", "getMana(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBigInt();
  }

  try_getMana(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getMana", "getMana(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRecoveryStats(
    tokenId: BigInt
  ): Character__getRecoveryStatsResultValue0Struct {
    let result = super.call(
      "getRecoveryStats",
      "getRecoveryStats(uint256):((uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return changetype<Character__getRecoveryStatsResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getRecoveryStats(
    tokenId: BigInt
  ): ethereum.CallResult<Character__getRecoveryStatsResultValue0Struct> {
    let result = super.tryCall(
      "getRecoveryStats",
      "getRecoveryStats(uint256):((uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Character__getRecoveryStatsResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getRoyaltyInfoForToken(
    _tokenId: BigInt
  ): Character__getRoyaltyInfoForTokenResult {
    let result = super.call(
      "getRoyaltyInfoForToken",
      "getRoyaltyInfoForToken(uint256):(address,uint16)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );

    return new Character__getRoyaltyInfoForTokenResult(
      result[0].toAddress(),
      result[1].toI32()
    );
  }

  try_getRoyaltyInfoForToken(
    _tokenId: BigInt
  ): ethereum.CallResult<Character__getRoyaltyInfoForTokenResult> {
    let result = super.tryCall(
      "getRoyaltyInfoForToken",
      "getRoyaltyInfoForToken(uint256):(address,uint16)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Character__getRoyaltyInfoForTokenResult(
        value[0].toAddress(),
        value[1].toI32()
      )
    );
  }

  getStamina(tokenId: BigInt): BigInt {
    let result = super.call("getStamina", "getStamina(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBigInt();
  }

  try_getStamina(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getStamina", "getStamina(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedOrOwner(_operator: Address, _tokenId: BigInt): boolean {
    let result = super.call(
      "isApprovedOrOwner",
      "isApprovedOrOwner(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_operator),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedOrOwner(
    _operator: Address,
    _tokenId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedOrOwner",
      "isApprovedOrOwner(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_operator),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  multicall(data: Array<Bytes>): Array<Bytes> {
    let result = super.call("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);

    return result[0].toBytesArray();
  }

  try_multicall(data: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nextTokenIdToMint(): BigInt {
    let result = super.call(
      "nextTokenIdToMint",
      "nextTokenIdToMint():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_nextTokenIdToMint(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextTokenIdToMint",
      "nextTokenIdToMint():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numCharacters(): BigInt {
    let result = super.call("numCharacters", "numCharacters():(uint256)", []);

    return result[0].toBigInt();
  }

  try_numCharacters(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numCharacters",
      "numCharacters():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  operatorRestriction(): boolean {
    let result = super.call(
      "operatorRestriction",
      "operatorRestriction():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_operatorRestriction(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "operatorRestriction",
      "operatorRestriction():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  royaltyInfo(
    tokenId: BigInt,
    salePrice: BigInt
  ): Character__royaltyInfoResult {
    let result = super.call(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(salePrice)
      ]
    );

    return new Character__royaltyInfoResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_royaltyInfo(
    tokenId: BigInt,
    salePrice: BigInt
  ): ethereum.CallResult<Character__royaltyInfoResult> {
    let result = super.tryCall(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(salePrice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Character__royaltyInfoResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(_tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(_tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddManaCall extends ethereum.Call {
  get inputs(): AddManaCall__Inputs {
    return new AddManaCall__Inputs(this);
  }

  get outputs(): AddManaCall__Outputs {
    return new AddManaCall__Outputs(this);
  }
}

export class AddManaCall__Inputs {
  _call: AddManaCall;

  constructor(call: AddManaCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddManaCall__Outputs {
  _call: AddManaCall;

  constructor(call: AddManaCall) {
    this._call = call;
  }
}

export class AddStaminaCall extends ethereum.Call {
  get inputs(): AddStaminaCall__Inputs {
    return new AddStaminaCall__Inputs(this);
  }

  get outputs(): AddStaminaCall__Outputs {
    return new AddStaminaCall__Outputs(this);
  }
}

export class AddStaminaCall__Inputs {
  _call: AddStaminaCall;

  constructor(call: AddStaminaCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddStaminaCall__Outputs {
  _call: AddStaminaCall;

  constructor(call: AddStaminaCall) {
    this._call = call;
  }
}

export class AddStatsCall extends ethereum.Call {
  get inputs(): AddStatsCall__Inputs {
    return new AddStatsCall__Inputs(this);
  }

  get outputs(): AddStatsCall__Outputs {
    return new AddStatsCall__Outputs(this);
  }
}

export class AddStatsCall__Inputs {
  _call: AddStatsCall;

  constructor(call: AddStatsCall) {
    this._call = call;
  }

  get characterTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get strength(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get dexterity(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get intelligence(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get vitality(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class AddStatsCall__Outputs {
  _call: AddStatsCall;

  constructor(call: AddStatsCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BatchMintToCall extends ethereum.Call {
  get inputs(): BatchMintToCall__Inputs {
    return new BatchMintToCall__Inputs(this);
  }

  get outputs(): BatchMintToCall__Outputs {
    return new BatchMintToCall__Outputs(this);
  }
}

export class BatchMintToCall__Inputs {
  _call: BatchMintToCall;

  constructor(call: BatchMintToCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _quantity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _baseURI(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class BatchMintToCall__Outputs {
  _call: BatchMintToCall;

  constructor(call: BatchMintToCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class ConsumeManaCall extends ethereum.Call {
  get inputs(): ConsumeManaCall__Inputs {
    return new ConsumeManaCall__Inputs(this);
  }

  get outputs(): ConsumeManaCall__Outputs {
    return new ConsumeManaCall__Outputs(this);
  }
}

export class ConsumeManaCall__Inputs {
  _call: ConsumeManaCall;

  constructor(call: ConsumeManaCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ConsumeManaCall__Outputs {
  _call: ConsumeManaCall;

  constructor(call: ConsumeManaCall) {
    this._call = call;
  }
}

export class ConsumeStaminaCall extends ethereum.Call {
  get inputs(): ConsumeStaminaCall__Inputs {
    return new ConsumeStaminaCall__Inputs(this);
  }

  get outputs(): ConsumeStaminaCall__Outputs {
    return new ConsumeStaminaCall__Outputs(this);
  }
}

export class ConsumeStaminaCall__Inputs {
  _call: ConsumeStaminaCall;

  constructor(call: ConsumeStaminaCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ConsumeStaminaCall__Outputs {
  _call: ConsumeStaminaCall;

  constructor(call: ConsumeStaminaCall) {
    this._call = call;
  }
}

export class EquipClassCall extends ethereum.Call {
  get inputs(): EquipClassCall__Inputs {
    return new EquipClassCall__Inputs(this);
  }

  get outputs(): EquipClassCall__Outputs {
    return new EquipClassCall__Outputs(this);
  }
}

export class EquipClassCall__Inputs {
  _call: EquipClassCall;

  constructor(call: EquipClassCall) {
    this._call = call;
  }

  get characterTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get classId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class EquipClassCall__Outputs {
  _call: EquipClassCall;

  constructor(call: EquipClassCall) {
    this._call = call;
  }
}

export class EquipItemCall extends ethereum.Call {
  get inputs(): EquipItemCall__Inputs {
    return new EquipItemCall__Inputs(this);
  }

  get outputs(): EquipItemCall__Outputs {
    return new EquipItemCall__Outputs(this);
  }
}

export class EquipItemCall__Inputs {
  _call: EquipItemCall;

  constructor(call: EquipItemCall) {
    this._call = call;
  }

  get characterTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class EquipItemCall__Outputs {
  _call: EquipItemCall;

  constructor(call: EquipItemCall) {
    this._call = call;
  }
}

export class EquipSkillCall extends ethereum.Call {
  get inputs(): EquipSkillCall__Inputs {
    return new EquipSkillCall__Inputs(this);
  }

  get outputs(): EquipSkillCall__Outputs {
    return new EquipSkillCall__Outputs(this);
  }
}

export class EquipSkillCall__Inputs {
  _call: EquipSkillCall;

  constructor(call: EquipSkillCall) {
    this._call = call;
  }

  get characterTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get skillId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class EquipSkillCall__Outputs {
  _call: EquipSkillCall;

  constructor(call: EquipSkillCall) {
    this._call = call;
  }
}

export class GainXPCall extends ethereum.Call {
  get inputs(): GainXPCall__Inputs {
    return new GainXPCall__Inputs(this);
  }

  get outputs(): GainXPCall__Outputs {
    return new GainXPCall__Outputs(this);
  }
}

export class GainXPCall__Inputs {
  _call: GainXPCall;

  constructor(call: GainXPCall) {
    this._call = call;
  }

  get characterTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get xp(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class GainXPCall__Outputs {
  _call: GainXPCall;

  constructor(call: GainXPCall) {
    this._call = call;
  }
}

export class MintNewCharacterWithItemAndEquipCall extends ethereum.Call {
  get inputs(): MintNewCharacterWithItemAndEquipCall__Inputs {
    return new MintNewCharacterWithItemAndEquipCall__Inputs(this);
  }

  get outputs(): MintNewCharacterWithItemAndEquipCall__Outputs {
    return new MintNewCharacterWithItemAndEquipCall__Outputs(this);
  }
}

export class MintNewCharacterWithItemAndEquipCall__Inputs {
  _call: MintNewCharacterWithItemAndEquipCall;

  constructor(call: MintNewCharacterWithItemAndEquipCall) {
    this._call = call;
  }

  get _typeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _skillTokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintNewCharacterWithItemAndEquipCall__Outputs {
  _call: MintNewCharacterWithItemAndEquipCall;

  constructor(call: MintNewCharacterWithItemAndEquipCall) {
    this._call = call;
  }
}

export class MintToCall extends ethereum.Call {
  get inputs(): MintToCall__Inputs {
    return new MintToCall__Inputs(this);
  }

  get outputs(): MintToCall__Outputs {
    return new MintToCall__Outputs(this);
  }
}

export class MintToCall__Inputs {
  _call: MintToCall;

  constructor(call: MintToCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenURI(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class MintToCall__Outputs {
  _call: MintToCall;

  constructor(call: MintToCall) {
    this._call = call;
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class NewCharacterCall extends ethereum.Call {
  get inputs(): NewCharacterCall__Inputs {
    return new NewCharacterCall__Inputs(this);
  }

  get outputs(): NewCharacterCall__Outputs {
    return new NewCharacterCall__Outputs(this);
  }
}

export class NewCharacterCall__Inputs {
  _call: NewCharacterCall;

  constructor(call: NewCharacterCall) {
    this._call = call;
  }

  get _typeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class NewCharacterCall__Outputs {
  _call: NewCharacterCall;

  constructor(call: NewCharacterCall) {
    this._call = call;
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get value3(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RestoreManaToFullCall extends ethereum.Call {
  get inputs(): RestoreManaToFullCall__Inputs {
    return new RestoreManaToFullCall__Inputs(this);
  }

  get outputs(): RestoreManaToFullCall__Outputs {
    return new RestoreManaToFullCall__Outputs(this);
  }
}

export class RestoreManaToFullCall__Inputs {
  _call: RestoreManaToFullCall;

  constructor(call: RestoreManaToFullCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RestoreManaToFullCall__Outputs {
  _call: RestoreManaToFullCall;

  constructor(call: RestoreManaToFullCall) {
    this._call = call;
  }
}

export class RestoreStaminaToFullCall extends ethereum.Call {
  get inputs(): RestoreStaminaToFullCall__Inputs {
    return new RestoreStaminaToFullCall__Inputs(this);
  }

  get outputs(): RestoreStaminaToFullCall__Outputs {
    return new RestoreStaminaToFullCall__Outputs(this);
  }
}

export class RestoreStaminaToFullCall__Inputs {
  _call: RestoreStaminaToFullCall;

  constructor(call: RestoreStaminaToFullCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RestoreStaminaToFullCall__Outputs {
  _call: RestoreStaminaToFullCall;

  constructor(call: RestoreStaminaToFullCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBattleContractCall extends ethereum.Call {
  get inputs(): SetBattleContractCall__Inputs {
    return new SetBattleContractCall__Inputs(this);
  }

  get outputs(): SetBattleContractCall__Outputs {
    return new SetBattleContractCall__Outputs(this);
  }
}

export class SetBattleContractCall__Inputs {
  _call: SetBattleContractCall;

  constructor(call: SetBattleContractCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetBattleContractCall__Outputs {
  _call: SetBattleContractCall;

  constructor(call: SetBattleContractCall) {
    this._call = call;
  }
}

export class SetBattleItemsCall extends ethereum.Call {
  get inputs(): SetBattleItemsCall__Inputs {
    return new SetBattleItemsCall__Inputs(this);
  }

  get outputs(): SetBattleItemsCall__Outputs {
    return new SetBattleItemsCall__Outputs(this);
  }
}

export class SetBattleItemsCall__Inputs {
  _call: SetBattleItemsCall;

  constructor(call: SetBattleItemsCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetBattleItemsCall__Outputs {
  _call: SetBattleItemsCall;

  constructor(call: SetBattleItemsCall) {
    this._call = call;
  }
}

export class SetBattleSkillsCall extends ethereum.Call {
  get inputs(): SetBattleSkillsCall__Inputs {
    return new SetBattleSkillsCall__Inputs(this);
  }

  get outputs(): SetBattleSkillsCall__Outputs {
    return new SetBattleSkillsCall__Outputs(this);
  }
}

export class SetBattleSkillsCall__Inputs {
  _call: SetBattleSkillsCall;

  constructor(call: SetBattleSkillsCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetBattleSkillsCall__Outputs {
  _call: SetBattleSkillsCall;

  constructor(call: SetBattleSkillsCall) {
    this._call = call;
  }
}

export class SetClassContractCall extends ethereum.Call {
  get inputs(): SetClassContractCall__Inputs {
    return new SetClassContractCall__Inputs(this);
  }

  get outputs(): SetClassContractCall__Outputs {
    return new SetClassContractCall__Outputs(this);
  }
}

export class SetClassContractCall__Inputs {
  _call: SetClassContractCall;

  constructor(call: SetClassContractCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetClassContractCall__Outputs {
  _call: SetClassContractCall;

  constructor(call: SetClassContractCall) {
    this._call = call;
  }
}

export class SetContractURICall extends ethereum.Call {
  get inputs(): SetContractURICall__Inputs {
    return new SetContractURICall__Inputs(this);
  }

  get outputs(): SetContractURICall__Outputs {
    return new SetContractURICall__Outputs(this);
  }
}

export class SetContractURICall__Inputs {
  _call: SetContractURICall;

  constructor(call: SetContractURICall) {
    this._call = call;
  }

  get _uri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetContractURICall__Outputs {
  _call: SetContractURICall;

  constructor(call: SetContractURICall) {
    this._call = call;
  }
}

export class SetDefaultRoyaltyInfoCall extends ethereum.Call {
  get inputs(): SetDefaultRoyaltyInfoCall__Inputs {
    return new SetDefaultRoyaltyInfoCall__Inputs(this);
  }

  get outputs(): SetDefaultRoyaltyInfoCall__Outputs {
    return new SetDefaultRoyaltyInfoCall__Outputs(this);
  }
}

export class SetDefaultRoyaltyInfoCall__Inputs {
  _call: SetDefaultRoyaltyInfoCall;

  constructor(call: SetDefaultRoyaltyInfoCall) {
    this._call = call;
  }

  get _royaltyRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _royaltyBps(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetDefaultRoyaltyInfoCall__Outputs {
  _call: SetDefaultRoyaltyInfoCall;

  constructor(call: SetDefaultRoyaltyInfoCall) {
    this._call = call;
  }
}

export class SetOperatorRestrictionCall extends ethereum.Call {
  get inputs(): SetOperatorRestrictionCall__Inputs {
    return new SetOperatorRestrictionCall__Inputs(this);
  }

  get outputs(): SetOperatorRestrictionCall__Outputs {
    return new SetOperatorRestrictionCall__Outputs(this);
  }
}

export class SetOperatorRestrictionCall__Inputs {
  _call: SetOperatorRestrictionCall;

  constructor(call: SetOperatorRestrictionCall) {
    this._call = call;
  }

  get _restriction(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetOperatorRestrictionCall__Outputs {
  _call: SetOperatorRestrictionCall;

  constructor(call: SetOperatorRestrictionCall) {
    this._call = call;
  }
}

export class SetOwnerCall extends ethereum.Call {
  get inputs(): SetOwnerCall__Inputs {
    return new SetOwnerCall__Inputs(this);
  }

  get outputs(): SetOwnerCall__Outputs {
    return new SetOwnerCall__Outputs(this);
  }
}

export class SetOwnerCall__Inputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOwnerCall__Outputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }
}

export class SetRoyaltyInfoForTokenCall extends ethereum.Call {
  get inputs(): SetRoyaltyInfoForTokenCall__Inputs {
    return new SetRoyaltyInfoForTokenCall__Inputs(this);
  }

  get outputs(): SetRoyaltyInfoForTokenCall__Outputs {
    return new SetRoyaltyInfoForTokenCall__Outputs(this);
  }
}

export class SetRoyaltyInfoForTokenCall__Inputs {
  _call: SetRoyaltyInfoForTokenCall;

  constructor(call: SetRoyaltyInfoForTokenCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _bps(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetRoyaltyInfoForTokenCall__Outputs {
  _call: SetRoyaltyInfoForTokenCall;

  constructor(call: SetRoyaltyInfoForTokenCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class UnequipClassCall extends ethereum.Call {
  get inputs(): UnequipClassCall__Inputs {
    return new UnequipClassCall__Inputs(this);
  }

  get outputs(): UnequipClassCall__Outputs {
    return new UnequipClassCall__Outputs(this);
  }
}

export class UnequipClassCall__Inputs {
  _call: UnequipClassCall;

  constructor(call: UnequipClassCall) {
    this._call = call;
  }

  get characterTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnequipClassCall__Outputs {
  _call: UnequipClassCall;

  constructor(call: UnequipClassCall) {
    this._call = call;
  }
}

export class UnequipItemCall extends ethereum.Call {
  get inputs(): UnequipItemCall__Inputs {
    return new UnequipItemCall__Inputs(this);
  }

  get outputs(): UnequipItemCall__Outputs {
    return new UnequipItemCall__Outputs(this);
  }
}

export class UnequipItemCall__Inputs {
  _call: UnequipItemCall;

  constructor(call: UnequipItemCall) {
    this._call = call;
  }

  get characterTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get itemTokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UnequipItemCall__Outputs {
  _call: UnequipItemCall;

  constructor(call: UnequipItemCall) {
    this._call = call;
  }
}

export class UnequipSkillCall extends ethereum.Call {
  get inputs(): UnequipSkillCall__Inputs {
    return new UnequipSkillCall__Inputs(this);
  }

  get outputs(): UnequipSkillCall__Outputs {
    return new UnequipSkillCall__Outputs(this);
  }
}

export class UnequipSkillCall__Inputs {
  _call: UnequipSkillCall;

  constructor(call: UnequipSkillCall) {
    this._call = call;
  }

  get characterTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get skillId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UnequipSkillCall__Outputs {
  _call: UnequipSkillCall;

  constructor(call: UnequipSkillCall) {
    this._call = call;
  }
}

export class UpdateURICall extends ethereum.Call {
  get inputs(): UpdateURICall__Inputs {
    return new UpdateURICall__Inputs(this);
  }

  get outputs(): UpdateURICall__Outputs {
    return new UpdateURICall__Outputs(this);
  }
}

export class UpdateURICall__Inputs {
  _call: UpdateURICall;

  constructor(call: UpdateURICall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _tokenURI(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class UpdateURICall__Outputs {
  _call: UpdateURICall;

  constructor(call: UpdateURICall) {
    this._call = call;
  }
}
