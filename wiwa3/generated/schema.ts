// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Player extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Player entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Player must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Player", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Player | null {
    return changetype<Player | null>(store.get_in_block("Player", id));
  }

  static load(id: string): Player | null {
    return changetype<Player | null>(store.get("Player", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get battles(): Array<string> | null {
    let value = this.get("battles");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get characters(): Array<string> | null {
    let value = this.get("characters");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get totalDamageDealt(): BigInt {
    let value = this.get("totalDamageDealt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalDamageDealt(value: BigInt) {
    this.set("totalDamageDealt", Value.fromBigInt(value));
  }

  get totalDamageTaken(): BigInt {
    let value = this.get("totalDamageTaken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalDamageTaken(value: BigInt) {
    this.set("totalDamageTaken", Value.fromBigInt(value));
  }
}

export class Character extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Character entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Character must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Character", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Character | null {
    return changetype<Character | null>(store.get_in_block("Character", id));
  }

  static load(id: string): Character | null {
    return changetype<Character | null>(store.get("Character", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get battles(): Array<string> | null {
    let value = this.get("battles");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get totalDamageDealt(): BigInt {
    let value = this.get("totalDamageDealt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalDamageDealt(value: BigInt) {
    this.set("totalDamageDealt", Value.fromBigInt(value));
  }

  get totalDamageTaken(): BigInt {
    let value = this.get("totalDamageTaken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalDamageTaken(value: BigInt) {
    this.set("totalDamageTaken", Value.fromBigInt(value));
  }

  get health(): BigInt {
    let value = this.get("health");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set health(value: BigInt) {
    this.set("health", Value.fromBigInt(value));
  }

  get attack(): BigInt {
    let value = this.get("attack");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set attack(value: BigInt) {
    this.set("attack", Value.fromBigInt(value));
  }

  get defense(): BigInt {
    let value = this.get("defense");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set defense(value: BigInt) {
    this.set("defense", Value.fromBigInt(value));
  }

  get mana(): BigInt {
    let value = this.get("mana");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set mana(value: BigInt) {
    this.set("mana", Value.fromBigInt(value));
  }

  get typeId(): BigInt {
    let value = this.get("typeId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set typeId(value: BigInt) {
    this.set("typeId", Value.fromBigInt(value));
  }

  get equippedSkills(): Array<BigInt> | null {
    let value = this.get("equippedSkills");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set equippedSkills(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("equippedSkills");
    } else {
      this.set("equippedSkills", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get activeEffectIds(): Array<BigInt> | null {
    let value = this.get("activeEffectIds");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set activeEffectIds(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("activeEffectIds");
    } else {
      this.set("activeEffectIds", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get activeEffectDurations(): Array<BigInt> | null {
    let value = this.get("activeEffectDurations");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set activeEffectDurations(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("activeEffectDurations");
    } else {
      this.set(
        "activeEffectDurations",
        Value.fromBigIntArray(<Array<BigInt>>value)
      );
    }
  }
}

export class Battle extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Battle entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Battle must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Battle", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Battle | null {
    return changetype<Battle | null>(store.get_in_block("Battle", id));
  }

  static load(id: string): Battle | null {
    return changetype<Battle | null>(store.get("Battle", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get creator(): string | null {
    let value = this.get("creator");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set creator(value: string | null) {
    if (!value) {
      this.unset("creator");
    } else {
      this.set("creator", Value.fromString(<string>value));
    }
  }

  get players(): Array<string> | null {
    let value = this.get("players");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set players(value: Array<string> | null) {
    if (!value) {
      this.unset("players");
    } else {
      this.set("players", Value.fromStringArray(<Array<string>>value));
    }
  }

  get characters(): Array<string> | null {
    let value = this.get("characters");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set characters(value: Array<string> | null) {
    if (!value) {
      this.unset("characters");
    } else {
      this.set("characters", Value.fromStringArray(<Array<string>>value));
    }
  }

  get status(): string {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get winner(): string | null {
    let value = this.get("winner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set winner(value: string | null) {
    if (!value) {
      this.unset("winner");
    } else {
      this.set("winner", Value.fromString(<string>value));
    }
  }

  get loser(): string | null {
    let value = this.get("loser");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set loser(value: string | null) {
    if (!value) {
      this.unset("loser");
    } else {
      this.set("loser", Value.fromString(<string>value));
    }
  }

  get rounds(): Array<string> | null {
    let value = this.get("rounds");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get totalDamageDealt(): BigInt {
    let value = this.get("totalDamageDealt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalDamageDealt(value: BigInt) {
    this.set("totalDamageDealt", Value.fromBigInt(value));
  }

  get totalDamageTaken(): BigInt {
    let value = this.get("totalDamageTaken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalDamageTaken(value: BigInt) {
    this.set("totalDamageTaken", Value.fromBigInt(value));
  }

  get roundNumber(): i32 {
    let value = this.get("roundNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set roundNumber(value: i32) {
    this.set("roundNumber", Value.fromI32(value));
  }
}

export class Round extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Round entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Round must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Round", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Round | null {
    return changetype<Round | null>(store.get_in_block("Round", id));
  }

  static load(id: string): Round | null {
    return changetype<Round | null>(store.get("Round", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get battle(): string {
    let value = this.get("battle");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set battle(value: string) {
    this.set("battle", Value.fromString(value));
  }

  get damagedPlayers(): Array<string> | null {
    let value = this.get("damagedPlayers");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set damagedPlayers(value: Array<string> | null) {
    if (!value) {
      this.unset("damagedPlayers");
    } else {
      this.set("damagedPlayers", Value.fromStringArray(<Array<string>>value));
    }
  }

  get damages(): Array<string> | null {
    let value = this.get("damages");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get moves(): Array<string> | null {
    let value = this.get("moves");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get statusEffects(): Array<string> | null {
    let value = this.get("statusEffects");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get diceRoll(): BigInt | null {
    let value = this.get("diceRoll");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set diceRoll(value: BigInt | null) {
    if (!value) {
      this.unset("diceRoll");
    } else {
      this.set("diceRoll", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Move extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Move entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Move must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Move", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Move | null {
    return changetype<Move | null>(store.get_in_block("Move", id));
  }

  static load(id: string): Move | null {
    return changetype<Move | null>(store.get("Move", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get round(): string {
    let value = this.get("round");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set round(value: string) {
    this.set("round", Value.fromString(value));
  }

  get player(): string {
    let value = this.get("player");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set player(value: string) {
    this.set("player", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get damageDealt(): BigInt | null {
    let value = this.get("damageDealt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set damageDealt(value: BigInt | null) {
    if (!value) {
      this.unset("damageDealt");
    } else {
      this.set("damageDealt", Value.fromBigInt(<BigInt>value));
    }
  }

  get damageTaken(): BigInt | null {
    let value = this.get("damageTaken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set damageTaken(value: BigInt | null) {
    if (!value) {
      this.unset("damageTaken");
    } else {
      this.set("damageTaken", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class StatusEffect extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StatusEffect entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type StatusEffect must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("StatusEffect", id.toString(), this);
    }
  }

  static loadInBlock(id: string): StatusEffect | null {
    return changetype<StatusEffect | null>(
      store.get_in_block("StatusEffect", id)
    );
  }

  static load(id: string): StatusEffect | null {
    return changetype<StatusEffect | null>(store.get("StatusEffect", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get round(): string {
    let value = this.get("round");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set round(value: string) {
    this.set("round", Value.fromString(value));
  }

  get character(): string {
    let value = this.get("character");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set character(value: string) {
    this.set("character", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get effectId(): BigInt {
    let value = this.get("effectId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set effectId(value: BigInt) {
    this.set("effectId", Value.fromBigInt(value));
  }

  get effectName(): string {
    let value = this.get("effectName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set effectName(value: string) {
    this.set("effectName", Value.fromString(value));
  }

  get effectType(): string {
    let value = this.get("effectType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set effectType(value: string) {
    this.set("effectType", Value.fromString(value));
  }

  get effectValue(): BigInt {
    let value = this.get("effectValue");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set effectValue(value: BigInt) {
    this.set("effectValue", Value.fromBigInt(value));
  }

  get duration(): BigInt {
    let value = this.get("duration");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set duration(value: BigInt) {
    this.set("duration", Value.fromBigInt(value));
  }
}

export class Damage extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Damage entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Damage must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Damage", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Damage | null {
    return changetype<Damage | null>(store.get_in_block("Damage", id));
  }

  static load(id: string): Damage | null {
    return changetype<Damage | null>(store.get("Damage", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get round(): string {
    let value = this.get("round");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set round(value: string) {
    this.set("round", Value.fromString(value));
  }

  get player(): string {
    let value = this.get("player");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set player(value: string) {
    this.set("player", Value.fromString(value));
  }

  get damageDealt(): BigInt {
    let value = this.get("damageDealt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set damageDealt(value: BigInt) {
    this.set("damageDealt", Value.fromBigInt(value));
  }

  get damageTaken(): BigInt {
    let value = this.get("damageTaken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set damageTaken(value: BigInt) {
    this.set("damageTaken", Value.fromBigInt(value));
  }
}
